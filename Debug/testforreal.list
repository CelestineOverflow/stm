
testforreal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b24  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006f04  08006f04  00016f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08006f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  2400006c  08006f80  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002c4  08006f80  000202c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00012f92  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000023a7  00000000  00000000  0003306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000de8  00000000  00000000  00035418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000acd  00000000  00000000  00036200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037275  00000000  00000000  00036ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013799  00000000  00000000  0006df42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015b2e6  00000000  00000000  000816db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00004274  00000000  00000000  001dc9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000050  00000000  00000000  001e0c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006dac 	.word	0x08006dac

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08006dac 	.word	0x08006dac

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000692:	2003      	movs	r0, #3
 8000694:	f000 f96e 	bl	8000974 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000698:	f001 fd30 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 800069c:	4602      	mov	r2, r0
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_Init+0x68>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	0a1b      	lsrs	r3, r3, #8
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	4913      	ldr	r1, [pc, #76]	; (80006f8 <HAL_Init+0x6c>)
 80006aa:	5ccb      	ldrb	r3, [r1, r3]
 80006ac:	f003 031f 	and.w	r3, r3, #31
 80006b0:	fa22 f303 	lsr.w	r3, r2, r3
 80006b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <HAL_Init+0x68>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_Init+0x6c>)
 80006c0:	5cd3      	ldrb	r3, [r2, r3]
 80006c2:	f003 031f 	and.w	r3, r3, #31
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	fa22 f303 	lsr.w	r3, r2, r3
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <HAL_Init+0x70>)
 80006ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_Init+0x74>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d6:	200f      	movs	r0, #15
 80006d8:	f000 f814 	bl	8000704 <HAL_InitTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e002      	b.n	80006ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006e6:	f005 f8fd 	bl	80058e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	58024400 	.word	0x58024400
 80006f8:	08006ec0 	.word	0x08006ec0
 80006fc:	2400000c 	.word	0x2400000c
 8000700:	24000008 	.word	0x24000008

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <HAL_InitTick+0x60>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e021      	b.n	800075c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000718:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_InitTick+0x64>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <HAL_InitTick+0x60>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f945 	bl	80009be <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f91d 	bl	800098a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x68>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24000004 	.word	0x24000004
 8000768:	24000008 	.word	0x24000008
 800076c:	24000000 	.word	0x24000000

08000770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	24000004 	.word	0x24000004
 8000794:	24000088 	.word	0x24000088

08000798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	24000088 	.word	0x24000088

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff ffee 	bl	8000798 <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffde 	bl	8000798 <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	24000004 	.word	0x24000004

080007f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetREVID+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	0c1b      	lsrs	r3, r3, #16
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	5c001000 	.word	0x5c001000

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <__NVIC_SetPriorityGrouping+0x40>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 800083a:	4313      	orrs	r3, r2
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x40>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00
 8000854:	05fa0000 	.word	0x05fa0000

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db0a      	blt.n	800089e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	b2da      	uxtb	r2, r3
 800088c:	490c      	ldr	r1, [pc, #48]	; (80008c0 <__NVIC_SetPriority+0x4c>)
 800088e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	440b      	add	r3, r1
 8000898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800089c:	e00a      	b.n	80008b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <__NVIC_SetPriority+0x50>)
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	3b04      	subs	r3, #4
 80008ac:	0112      	lsls	r2, r2, #4
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	440b      	add	r3, r1
 80008b2:	761a      	strb	r2, [r3, #24]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	e000e100 	.word	0xe000e100
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b089      	sub	sp, #36	; 0x24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f1c3 0307 	rsb	r3, r3, #7
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	bf28      	it	cs
 80008e6:	2304      	movcs	r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3304      	adds	r3, #4
 80008ee:	2b06      	cmp	r3, #6
 80008f0:	d902      	bls.n	80008f8 <NVIC_EncodePriority+0x30>
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3b03      	subs	r3, #3
 80008f6:	e000      	b.n	80008fa <NVIC_EncodePriority+0x32>
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43da      	mvns	r2, r3
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	401a      	ands	r2, r3
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa01 f303 	lsl.w	r3, r1, r3
 800091a:	43d9      	mvns	r1, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	4313      	orrs	r3, r2
         );
}
 8000922:	4618      	mov	r0, r3
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000940:	d301      	bcc.n	8000946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000942:	2301      	movs	r3, #1
 8000944:	e00f      	b.n	8000966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <SysTick_Config+0x40>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800094e:	210f      	movs	r1, #15
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	f7ff ff8e 	bl	8000874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <SysTick_Config+0x40>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <SysTick_Config+0x40>)
 8000960:	2207      	movs	r2, #7
 8000962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff47 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	60b9      	str	r1, [r7, #8]
 8000994:	607a      	str	r2, [r7, #4]
 8000996:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000998:	f7ff ff5e 	bl	8000858 <__NVIC_GetPriorityGrouping>
 800099c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff ff90 	bl	80008c8 <NVIC_EncodePriority>
 80009a8:	4602      	mov	r2, r0
 80009aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ff5f 	bl	8000874 <__NVIC_SetPriority>
}
 80009b6:	bf00      	nop
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff ffb2 	bl	8000930 <SysTick_Config>
 80009cc:	4603      	mov	r3, r0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d8:	b480      	push	{r7}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009e6:	4b89      	ldr	r3, [pc, #548]	; (8000c0c <HAL_GPIO_Init+0x234>)
 80009e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009ea:	e194      	b.n	8000d16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2101      	movs	r1, #1
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	fa01 f303 	lsl.w	r3, r1, r3
 80009f8:	4013      	ands	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 8186 	beq.w	8000d10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d005      	beq.n	8000a1c <HAL_GPIO_Init+0x44>
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d130      	bne.n	8000a7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	2203      	movs	r2, #3
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a52:	2201      	movs	r2, #1
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	091b      	lsrs	r3, r3, #4
 8000a68:	f003 0201 	and.w	r2, r3, #1
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	d017      	beq.n	8000aba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	689a      	ldr	r2, [r3, #8]
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d123      	bne.n	8000b0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	08da      	lsrs	r2, r3, #3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3208      	adds	r2, #8
 8000ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	220f      	movs	r2, #15
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	f003 0307 	and.w	r3, r3, #7
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	08da      	lsrs	r2, r3, #3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3208      	adds	r2, #8
 8000b08:	69b9      	ldr	r1, [r7, #24]
 8000b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	2203      	movs	r2, #3
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f003 0203 	and.w	r2, r3, #3
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80e0 	beq.w	8000d10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <HAL_GPIO_Init+0x238>)
 8000b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b56:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_GPIO_Init+0x238>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <HAL_GPIO_Init+0x238>)
 8000b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <HAL_GPIO_Init+0x23c>)
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	3302      	adds	r3, #2
 8000b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f003 0303 	and.w	r3, r3, #3
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	220f      	movs	r2, #15
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a20      	ldr	r2, [pc, #128]	; (8000c18 <HAL_GPIO_Init+0x240>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d052      	beq.n	8000c40 <HAL_GPIO_Init+0x268>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_GPIO_Init+0x244>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d031      	beq.n	8000c06 <HAL_GPIO_Init+0x22e>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_GPIO_Init+0x248>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d02b      	beq.n	8000c02 <HAL_GPIO_Init+0x22a>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a1d      	ldr	r2, [pc, #116]	; (8000c24 <HAL_GPIO_Init+0x24c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d025      	beq.n	8000bfe <HAL_GPIO_Init+0x226>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <HAL_GPIO_Init+0x250>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d01f      	beq.n	8000bfa <HAL_GPIO_Init+0x222>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_GPIO_Init+0x254>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d019      	beq.n	8000bf6 <HAL_GPIO_Init+0x21e>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_GPIO_Init+0x258>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d013      	beq.n	8000bf2 <HAL_GPIO_Init+0x21a>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_GPIO_Init+0x25c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d00d      	beq.n	8000bee <HAL_GPIO_Init+0x216>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_GPIO_Init+0x260>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d007      	beq.n	8000bea <HAL_GPIO_Init+0x212>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_GPIO_Init+0x264>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_GPIO_Init+0x20e>
 8000be2:	2309      	movs	r3, #9
 8000be4:	e02d      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000be6:	230a      	movs	r3, #10
 8000be8:	e02b      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bea:	2308      	movs	r3, #8
 8000bec:	e029      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bee:	2307      	movs	r3, #7
 8000bf0:	e027      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bf2:	2306      	movs	r3, #6
 8000bf4:	e025      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e023      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	e021      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000bfe:	2303      	movs	r3, #3
 8000c00:	e01f      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000c02:	2302      	movs	r3, #2
 8000c04:	e01d      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000c06:	2301      	movs	r3, #1
 8000c08:	e01b      	b.n	8000c42 <HAL_GPIO_Init+0x26a>
 8000c0a:	bf00      	nop
 8000c0c:	58000080 	.word	0x58000080
 8000c10:	58024400 	.word	0x58024400
 8000c14:	58000400 	.word	0x58000400
 8000c18:	58020000 	.word	0x58020000
 8000c1c:	58020400 	.word	0x58020400
 8000c20:	58020800 	.word	0x58020800
 8000c24:	58020c00 	.word	0x58020c00
 8000c28:	58021000 	.word	0x58021000
 8000c2c:	58021400 	.word	0x58021400
 8000c30:	58021800 	.word	0x58021800
 8000c34:	58021c00 	.word	0x58021c00
 8000c38:	58022000 	.word	0x58022000
 8000c3c:	58022400 	.word	0x58022400
 8000c40:	2300      	movs	r3, #0
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c52:	4938      	ldr	r1, [pc, #224]	; (8000d34 <HAL_GPIO_Init+0x35c>)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3301      	adds	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f47f ae63 	bne.w	80009ec <HAL_GPIO_Init+0x14>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3724      	adds	r7, #36	; 0x24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58000400 	.word	0x58000400

08000d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
 8000d44:	4613      	mov	r3, r2
 8000d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d48:	787b      	ldrb	r3, [r7, #1]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d4e:	887a      	ldrh	r2, [r7, #2]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d54:	e003      	b.n	8000d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	041a      	lsls	r2, r3, #16
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	619a      	str	r2, [r3, #24]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e08b      	b.n	8000e96 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d106      	bne.n	8000d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f004 fdc0 	bl	8005918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2224      	movs	r2, #36	; 0x24
 8000d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0201 	bic.w	r2, r2, #1
 8000dae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d107      	bne.n	8000de6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	e006      	b.n	8000df4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000df2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d108      	bne.n	8000e0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	685a      	ldr	r2, [r3, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	e007      	b.n	8000e1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6859      	ldr	r1, [r3, #4]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_I2C_Init+0x134>)
 8000e2a:	430b      	orrs	r3, r1
 8000e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69d9      	ldr	r1, [r3, #28]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a1a      	ldr	r2, [r3, #32]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2220      	movs	r2, #32
 8000e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	02008000 	.word	0x02008000

08000ea4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b20      	cmp	r3, #32
 8000ec2:	f040 80d2 	bne.w	800106a <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ed4:	d101      	bne.n	8000eda <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e0c8      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_I2C_IsDeviceReady+0x44>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e0c1      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2224      	movs	r2, #36	; 0x24
 8000ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <HAL_I2C_IsDeviceReady+0x6e>
 8000f06:	897b      	ldrh	r3, [r7, #10]
 8000f08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f0c:	4b59      	ldr	r3, [pc, #356]	; (8001074 <HAL_I2C_IsDeviceReady+0x1d0>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	e004      	b.n	8000f1c <HAL_I2C_IsDeviceReady+0x78>
 8000f12:	897b      	ldrh	r3, [r7, #10]
 8000f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000f18:	4b57      	ldr	r3, [pc, #348]	; (8001078 <HAL_I2C_IsDeviceReady+0x1d4>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8000f22:	f7ff fc39 	bl	8000798 <HAL_GetTick>
 8000f26:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b20      	cmp	r3, #32
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	2b10      	cmp	r3, #16
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000f54:	e034      	b.n	8000fc0 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d01a      	beq.n	8000f94 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000f5e:	f7ff fc1b 	bl	8000798 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d302      	bcc.n	8000f74 <HAL_I2C_IsDeviceReady+0xd0>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10f      	bne.n	8000f94 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2220      	movs	r2, #32
 8000f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e06b      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	2b20      	cmp	r3, #32
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0310 	and.w	r3, r3, #16
 8000fb4:	2b10      	cmp	r3, #16
 8000fb6:	bf0c      	ite	eq
 8000fb8:	2301      	moveq	r3, #1
 8000fba:	2300      	movne	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <HAL_I2C_IsDeviceReady+0x128>
 8000fc6:	7fbb      	ldrb	r3, [r7, #30]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0c4      	beq.n	8000f56 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0310 	and.w	r3, r3, #16
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d01a      	beq.n	8001010 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2120      	movs	r1, #32
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f86d 	bl	80010c4 <I2C_WaitOnFlagUntilTimeout>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e03b      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2220      	movs	r2, #32
 8001000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	e02d      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	2120      	movs	r1, #32
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f852 	bl	80010c4 <I2C_WaitOnFlagUntilTimeout>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e020      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2210      	movs	r2, #16
 8001030:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2220      	movs	r2, #32
 8001038:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	429a      	cmp	r2, r3
 8001046:	f63f af5a 	bhi.w	8000efe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2220      	movs	r2, #32
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f043 0220 	orr.w	r2, r3, #32
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800106a:	2302      	movs	r3, #2
  }
}
 800106c:	4618      	mov	r0, r3
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	02002000 	.word	0x02002000
 8001078:	02002800 	.word	0x02002800

0800107c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b02      	cmp	r3, #2
 8001090:	d103      	bne.n	800109a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d007      	beq.n	80010b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0201 	orr.w	r2, r2, #1
 80010b6:	619a      	str	r2, [r3, #24]
  }
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010d4:	e03b      	b.n	800114e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 f84c 	bl	8001178 <I2C_IsErrorOccurred>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e041      	b.n	800116e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d02d      	beq.n	800114e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010f2:	f7ff fb51 	bl	8000798 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d302      	bcc.n	8001108 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d122      	bne.n	800114e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	699a      	ldr	r2, [r3, #24]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	4013      	ands	r3, r2
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	429a      	cmp	r2, r3
 8001116:	bf0c      	ite	eq
 8001118:	2301      	moveq	r3, #1
 800111a:	2300      	movne	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	429a      	cmp	r2, r3
 8001124:	d113      	bne.n	800114e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f043 0220 	orr.w	r2, r3, #32
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2220      	movs	r2, #32
 8001136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	699a      	ldr	r2, [r3, #24]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4013      	ands	r3, r2
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	bf0c      	ite	eq
 800115e:	2301      	moveq	r3, #1
 8001160:	2300      	movne	r3, #0
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	429a      	cmp	r2, r3
 800116a:	d0b4      	beq.n	80010d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d068      	beq.n	8001276 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2210      	movs	r2, #16
 80011aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80011ac:	e049      	b.n	8001242 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d045      	beq.n	8001242 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80011b6:	f7ff faef 	bl	8000798 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d302      	bcc.n	80011cc <I2C_IsErrorOccurred+0x54>
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d13a      	bne.n	8001242 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80011de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011ee:	d121      	bne.n	8001234 <I2C_IsErrorOccurred+0xbc>
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011f6:	d01d      	beq.n	8001234 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80011f8:	7cfb      	ldrb	r3, [r7, #19]
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d01a      	beq.n	8001234 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800120c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800120e:	f7ff fac3 	bl	8000798 <HAL_GetTick>
 8001212:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001214:	e00e      	b.n	8001234 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001216:	f7ff fabf 	bl	8000798 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b19      	cmp	r3, #25
 8001222:	d907      	bls.n	8001234 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001224:	6a3b      	ldr	r3, [r7, #32]
 8001226:	f043 0320 	orr.w	r3, r3, #32
 800122a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001232:	e006      	b.n	8001242 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b20      	cmp	r3, #32
 8001240:	d1e9      	bne.n	8001216 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b20      	cmp	r3, #32
 800124e:	d003      	beq.n	8001258 <I2C_IsErrorOccurred+0xe0>
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0aa      	beq.n	80011ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2220      	movs	r2, #32
 8001266:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001268:	6a3b      	ldr	r3, [r7, #32]
 800126a:	f043 0304 	orr.w	r3, r3, #4
 800126e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80012cc:	6a3b      	ldr	r3, [r7, #32]
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80012e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01c      	beq.n	8001326 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff fec5 	bl	800107c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <I2C_IsErrorOccurred+0x1bc>)
 80012fe:	400b      	ands	r3, r1
 8001300:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	431a      	orrs	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2220      	movs	r2, #32
 8001312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800132a:	4618      	mov	r0, r3
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	fe00e800 	.word	0xfe00e800

08001338 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	d138      	bne.n	80013c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001358:	2302      	movs	r3, #2
 800135a:	e032      	b.n	80013c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800138a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6819      	ldr	r1, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0201 	orr.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	e000      	b.n	80013c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80013c0:	2302      	movs	r3, #2
  }
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b20      	cmp	r3, #32
 80013e2:	d139      	bne.n	8001458 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e033      	b.n	800145a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2224      	movs	r2, #36	; 0x24
 80013fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001420:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4313      	orrs	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f042 0201 	orr.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	e000      	b.n	800145a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001458:	2302      	movs	r3, #2
  }
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <HAL_PWREx_ConfigSupply+0x70>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b04      	cmp	r3, #4
 800147a:	d00a      	beq.n	8001492 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <HAL_PWREx_ConfigSupply+0x70>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e01f      	b.n	80014ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e01d      	b.n	80014ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_PWREx_ConfigSupply+0x70>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f023 0207 	bic.w	r2, r3, #7
 800149a:	490f      	ldr	r1, [pc, #60]	; (80014d8 <HAL_PWREx_ConfigSupply+0x70>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80014a2:	f7ff f979 	bl	8000798 <HAL_GetTick>
 80014a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014a8:	e009      	b.n	80014be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014aa:	f7ff f975 	bl	8000798 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014b8:	d901      	bls.n	80014be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e007      	b.n	80014ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_PWREx_ConfigSupply+0x70>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ca:	d1ee      	bne.n	80014aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	58024800 	.word	0x58024800

080014dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f000 bc48 	b.w	8001d80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 8088 	beq.w	800160e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fe:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001508:	4b96      	ldr	r3, [pc, #600]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001510:	2b10      	cmp	r3, #16
 8001512:	d007      	beq.n	8001524 <HAL_RCC_OscConfig+0x48>
 8001514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001516:	2b18      	cmp	r3, #24
 8001518:	d111      	bne.n	800153e <HAL_RCC_OscConfig+0x62>
 800151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	4b8f      	ldr	r3, [pc, #572]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d06d      	beq.n	800160c <HAL_RCC_OscConfig+0x130>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d169      	bne.n	800160c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f000 bc21 	b.w	8001d80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x7a>
 8001548:	4b86      	ldr	r3, [pc, #536]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a85      	ldr	r2, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e02e      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x9c>
 800155e:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a80      	ldr	r2, [pc, #512]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7d      	ldr	r2, [pc, #500]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xc0>
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a77      	ldr	r2, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b75      	ldr	r3, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a74      	ldr	r2, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xd8>
 800159c:	4b71      	ldr	r3, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a70      	ldr	r2, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b6e      	ldr	r3, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a6d      	ldr	r2, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff f8ec 	bl	8000798 <HAL_GetTick>
 80015c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff f8e8 	bl	8000798 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e3d4      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe8>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff f8d8 	bl	8000798 <HAL_GetTick>
 80015e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff f8d4 	bl	8000798 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e3c0      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x110>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80ca 	beq.w	80017b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161c:	4b51      	ldr	r3, [pc, #324]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001624:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001626:	4b4f      	ldr	r3, [pc, #316]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800162c:	6a3b      	ldr	r3, [r7, #32]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_RCC_OscConfig+0x166>
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b18      	cmp	r3, #24
 8001636:	d156      	bne.n	80016e6 <HAL_RCC_OscConfig+0x20a>
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d151      	bne.n	80016e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x17e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e392      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800165a:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 0219 	bic.w	r2, r3, #25
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	493f      	ldr	r1, [pc, #252]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff f894 	bl	8000798 <HAL_GetTick>
 8001670:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f890 	bl	8000798 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e37c      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001686:	4b37      	ldr	r3, [pc, #220]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001692:	f7ff f8b1 	bl	80007f8 <HAL_GetREVID>
 8001696:	4603      	mov	r3, r0
 8001698:	f241 0203 	movw	r2, #4099	; 0x1003
 800169c:	4293      	cmp	r3, r2
 800169e:	d817      	bhi.n	80016d0 <HAL_RCC_OscConfig+0x1f4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2b40      	cmp	r3, #64	; 0x40
 80016a6:	d108      	bne.n	80016ba <HAL_RCC_OscConfig+0x1de>
 80016a8:	4b2e      	ldr	r3, [pc, #184]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016b0:	4a2c      	ldr	r2, [pc, #176]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b8:	e07a      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	031b      	lsls	r3, r3, #12
 80016c8:	4926      	ldr	r1, [pc, #152]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ce:	e06f      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	061b      	lsls	r3, r3, #24
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e4:	e064      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d047      	beq.n	800177e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0219 	bic.w	r2, r3, #25
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	491a      	ldr	r1, [pc, #104]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f84a 	bl	8000798 <HAL_GetTick>
 8001704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff f846 	bl	8000798 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e332      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	f7ff f867 	bl	80007f8 <HAL_GetREVID>
 800172a:	4603      	mov	r3, r0
 800172c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001730:	4293      	cmp	r3, r2
 8001732:	d819      	bhi.n	8001768 <HAL_RCC_OscConfig+0x28c>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2b40      	cmp	r3, #64	; 0x40
 800173a:	d108      	bne.n	800174e <HAL_RCC_OscConfig+0x272>
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174a:	6053      	str	r3, [r2, #4]
 800174c:	e030      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	031b      	lsls	r3, r3, #12
 800175c:	4901      	ldr	r1, [pc, #4]	; (8001764 <HAL_RCC_OscConfig+0x288>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]
 8001762:	e025      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
 8001764:	58024400 	.word	0x58024400
 8001768:	4b9a      	ldr	r3, [pc, #616]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	4997      	ldr	r1, [pc, #604]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177e:	4b95      	ldr	r3, [pc, #596]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a94      	ldr	r2, [pc, #592]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff f805 	bl	8000798 <HAL_GetTick>
 800178e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001792:	f7ff f801 	bl	8000798 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2ed      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017a4:	4b8b      	ldr	r3, [pc, #556]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0310 	and.w	r3, r3, #16
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80a9 	beq.w	8001910 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017be:	4b85      	ldr	r3, [pc, #532]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c8:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x308>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	d13a      	bne.n	8001850 <HAL_RCC_OscConfig+0x374>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d135      	bne.n	8001850 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e4:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x320>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b80      	cmp	r3, #128	; 0x80
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e2c1      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017fc:	f7fe fffc 	bl	80007f8 <HAL_GetREVID>
 8001800:	4603      	mov	r3, r0
 8001802:	f241 0203 	movw	r2, #4099	; 0x1003
 8001806:	4293      	cmp	r3, r2
 8001808:	d817      	bhi.n	800183a <HAL_RCC_OscConfig+0x35e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	2b20      	cmp	r3, #32
 8001810:	d108      	bne.n	8001824 <HAL_RCC_OscConfig+0x348>
 8001812:	4b70      	ldr	r3, [pc, #448]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800181a:	4a6e      	ldr	r2, [pc, #440]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800181c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001820:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001822:	e075      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001824:	4b6b      	ldr	r3, [pc, #428]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	069b      	lsls	r3, r3, #26
 8001832:	4968      	ldr	r1, [pc, #416]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001834:	4313      	orrs	r3, r2
 8001836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001838:	e06a      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800183a:	4b66      	ldr	r3, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	061b      	lsls	r3, r3, #24
 8001848:	4962      	ldr	r1, [pc, #392]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800184a:	4313      	orrs	r3, r2
 800184c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800184e:	e05f      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d042      	beq.n	80018de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001858:	4b5e      	ldr	r3, [pc, #376]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a5d      	ldr	r2, [pc, #372]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800185e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7fe ff98 	bl	8000798 <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800186c:	f7fe ff94 	bl	8000798 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e280      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800187e:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800188a:	f7fe ffb5 	bl	80007f8 <HAL_GetREVID>
 800188e:	4603      	mov	r3, r0
 8001890:	f241 0203 	movw	r2, #4099	; 0x1003
 8001894:	4293      	cmp	r3, r2
 8001896:	d817      	bhi.n	80018c8 <HAL_RCC_OscConfig+0x3ec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	2b20      	cmp	r3, #32
 800189e:	d108      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3d6>
 80018a0:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018a8:	4a4a      	ldr	r2, [pc, #296]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018ae:	6053      	str	r3, [r2, #4]
 80018b0:	e02e      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	069b      	lsls	r3, r3, #26
 80018c0:	4944      	ldr	r1, [pc, #272]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	604b      	str	r3, [r1, #4]
 80018c6:	e023      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	493f      	ldr	r1, [pc, #252]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
 80018dc:	e018      	b.n	8001910 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018de:	4b3d      	ldr	r3, [pc, #244]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a3c      	ldr	r2, [pc, #240]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7fe ff55 	bl	8000798 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018f2:	f7fe ff51 	bl	8000798 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e23d      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d036      	beq.n	800198a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d019      	beq.n	8001958 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001928:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7fe ff32 	bl	8000798 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7fe ff2e 	bl	8000798 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e21a      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x45c>
 8001956:	e018      	b.n	800198a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 800195e:	f023 0301 	bic.w	r3, r3, #1
 8001962:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7fe ff18 	bl	8000798 <HAL_GetTick>
 8001968:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7fe ff14 	bl	8000798 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e200      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d039      	beq.n	8001a0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019aa:	f7fe fef5 	bl	8000798 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b2:	f7fe fef1 	bl	8000798 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1dd      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x4d6>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x52e>
 80019d2:	bf00      	nop
 80019d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019d8:	4b9b      	ldr	r3, [pc, #620]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 80019de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019e4:	f7fe fed8 	bl	8000798 <HAL_GetTick>
 80019e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ec:	f7fe fed4 	bl	8000798 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e1c0      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019fe:	4b92      	ldr	r3, [pc, #584]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 8081 	beq.w	8001b1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x770>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a8b      	ldr	r2, [pc, #556]	; (8001c4c <HAL_RCC_OscConfig+0x770>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a24:	f7fe feb8 	bl	8000798 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7fe feb4 	bl	8000798 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1a0      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a3e:	4b83      	ldr	r3, [pc, #524]	; (8001c4c <HAL_RCC_OscConfig+0x770>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x584>
 8001a52:	4b7d      	ldr	r3, [pc, #500]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a7c      	ldr	r2, [pc, #496]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5e:	e02d      	b.n	8001abc <HAL_RCC_OscConfig+0x5e0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10c      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5a6>
 8001a68:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a76      	ldr	r2, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
 8001a74:	4b74      	ldr	r3, [pc, #464]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a78:	4a73      	ldr	r2, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	f023 0304 	bic.w	r3, r3, #4
 8001a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x5e0>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x5c8>
 8001a8a:	4b6f      	ldr	r3, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6713      	str	r3, [r2, #112]	; 0x70
 8001a96:	4b6c      	ldr	r3, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	4a6b      	ldr	r2, [pc, #428]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x5e0>
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a67      	ldr	r2, [pc, #412]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	4b65      	ldr	r3, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	4a64      	ldr	r2, [pc, #400]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7fe fe68 	bl	8000798 <HAL_GetTick>
 8001ac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7fe fe64 	bl	8000798 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e14e      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae2:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ee      	beq.n	8001acc <HAL_RCC_OscConfig+0x5f0>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7fe fe52 	bl	8000798 <HAL_GetTick>
 8001af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7fe fe4e 	bl	8000798 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e138      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ee      	bne.n	8001af8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 812d 	beq.w	8001d7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b2c:	2b18      	cmp	r3, #24
 8001b2e:	f000 80bd 	beq.w	8001cac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	f040 809e 	bne.w	8001c78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b42      	ldr	r3, [pc, #264]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a41      	ldr	r2, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7fe fe26 	bl	8000798 <HAL_GetTick>
 8001b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7fe fe22 	bl	8000798 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e10e      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b62:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_RCC_OscConfig+0x774>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b7e:	0112      	lsls	r2, r2, #4
 8001b80:	430a      	orrs	r2, r1
 8001b82:	4931      	ldr	r1, [pc, #196]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	628b      	str	r3, [r1, #40]	; 0x28
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	3b01      	subs	r3, #1
 8001b98:	025b      	lsls	r3, r3, #9
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	061b      	lsls	r3, r3, #24
 8001bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001bb8:	4923      	ldr	r1, [pc, #140]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	4a21      	ldr	r2, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bc4:	f023 0301 	bic.w	r3, r3, #1
 8001bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x778>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bd6:	00d2      	lsls	r2, r2, #3
 8001bd8:	491b      	ldr	r1, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	f023 020c 	bic.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4917      	ldr	r1, [pc, #92]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f023 0202 	bic.w	r2, r3, #2
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	4912      	ldr	r1, [pc, #72]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <HAL_RCC_OscConfig+0x76c>)
 8001c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7fe fdab 	bl	8000798 <HAL_GetTick>
 8001c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c44:	e011      	b.n	8001c6a <HAL_RCC_OscConfig+0x78e>
 8001c46:	bf00      	nop
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58024800 	.word	0x58024800
 8001c50:	fffffc0c 	.word	0xfffffc0c
 8001c54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe fd9e 	bl	8000798 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e08a      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0x77c>
 8001c76:	e082      	b.n	8001d7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe fd88 	bl	8000798 <HAL_GetTick>
 8001c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fd84 	bl	8000798 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e070      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x7b0>
 8001caa:	e068      	b.n	8001d7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d031      	beq.n	8001d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0203 	and.w	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d12a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d122      	bne.n	8001d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d11a      	bne.n	8001d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0a5b      	lsrs	r3, r3, #9
 8001cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d111      	bne.n	8001d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0c1b      	lsrs	r3, r3, #16
 8001d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d108      	bne.n	8001d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	0e1b      	lsrs	r3, r3, #24
 8001d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e02b      	b.n	8001d80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d28:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d01f      	beq.n	8001d7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d4a:	f7fe fd25 	bl	8000798 <HAL_GetTick>
 8001d4e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d50:	bf00      	nop
 8001d52:	f7fe fd21 	bl	8000798 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d0f9      	beq.n	8001d52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_OscConfig+0x8b0>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d6a:	00d2      	lsls	r2, r2, #3
 8001d6c:	4906      	ldr	r1, [pc, #24]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_RCC_OscConfig+0x8ac>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3730      	adds	r7, #48	; 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	58024400 	.word	0x58024400
 8001d8c:	ffff0007 	.word	0xffff0007

08001d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e19c      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b87      	ldr	r3, [pc, #540]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 020f 	bic.w	r2, r3, #15
 8001dba:	4985      	ldr	r1, [pc, #532]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b83      	ldr	r3, [pc, #524]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e184      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d908      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4975      	ldr	r1, [pc, #468]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e1e:	4b6d      	ldr	r3, [pc, #436]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	496a      	ldr	r1, [pc, #424]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	4b64      	ldr	r3, [pc, #400]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	495e      	ldr	r1, [pc, #376]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d010      	beq.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d908      	bls.n	8001e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4953      	ldr	r1, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68da      	ldr	r2, [r3, #12]
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b4a      	ldr	r3, [pc, #296]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f023 020f 	bic.w	r2, r3, #15
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d055      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	4940      	ldr	r1, [pc, #256]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d121      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0f6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d115      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0ea      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0de      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f20:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d6      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f42:	f7fe fc29 	bl	8000798 <HAL_GetTick>
 8001f46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f48:	e00a      	b.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7fe fc25 	bl	8000798 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0be      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1eb      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d208      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d214      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 020f 	bic.w	r2, r3, #15
 8001fb6:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_RCC_ClockConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e086      	b.n	80020de <HAL_RCC_ClockConfig+0x34e>
 8001fd0:	52002000 	.word	0x52002000
 8001fd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d208      	bcs.n	8002006 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ff4:	4b3c      	ldr	r3, [pc, #240]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4939      	ldr	r1, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002002:	4313      	orrs	r3, r2
 8002004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d010      	beq.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695a      	ldr	r2, [r3, #20]
 8002016:	4b34      	ldr	r3, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201e:	429a      	cmp	r2, r3
 8002020:	d208      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002022:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	492e      	ldr	r1, [pc, #184]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002030:	4313      	orrs	r3, r2
 8002032:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d010      	beq.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800204c:	429a      	cmp	r2, r3
 800204e:	d208      	bcs.n	8002062 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4922      	ldr	r1, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800205e:	4313      	orrs	r3, r2
 8002060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69da      	ldr	r2, [r3, #28]
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800207a:	429a      	cmp	r2, r3
 800207c:	d208      	bcs.n	8002090 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4917      	ldr	r1, [pc, #92]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 800208c:	4313      	orrs	r3, r2
 800208e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002090:	f000 f834 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8002094:	4602      	mov	r2, r0
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	4912      	ldr	r1, [pc, #72]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020a2:	5ccb      	ldrb	r3, [r1, r3]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x35c>)
 80020b8:	5cd3      	ldrb	r3, [r2, r3]
 80020ba:	f003 031f 	and.w	r3, r3, #31
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_RCC_ClockConfig+0x360>)
 80020c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020c8:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x364>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x368>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fb16 	bl	8000704 <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	58024400 	.word	0x58024400
 80020ec:	08006ec0 	.word	0x08006ec0
 80020f0:	2400000c 	.word	0x2400000c
 80020f4:	24000008 	.word	0x24000008
 80020f8:	24000000 	.word	0x24000000

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002102:	4bb3      	ldr	r3, [pc, #716]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210a:	2b18      	cmp	r3, #24
 800210c:	f200 8155 	bhi.w	80023ba <HAL_RCC_GetSysClockFreq+0x2be>
 8002110:	a201      	add	r2, pc, #4	; (adr r2, 8002118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	0800217d 	.word	0x0800217d
 800211c:	080023bb 	.word	0x080023bb
 8002120:	080023bb 	.word	0x080023bb
 8002124:	080023bb 	.word	0x080023bb
 8002128:	080023bb 	.word	0x080023bb
 800212c:	080023bb 	.word	0x080023bb
 8002130:	080023bb 	.word	0x080023bb
 8002134:	080023bb 	.word	0x080023bb
 8002138:	080021a3 	.word	0x080021a3
 800213c:	080023bb 	.word	0x080023bb
 8002140:	080023bb 	.word	0x080023bb
 8002144:	080023bb 	.word	0x080023bb
 8002148:	080023bb 	.word	0x080023bb
 800214c:	080023bb 	.word	0x080023bb
 8002150:	080023bb 	.word	0x080023bb
 8002154:	080023bb 	.word	0x080023bb
 8002158:	080021a9 	.word	0x080021a9
 800215c:	080023bb 	.word	0x080023bb
 8002160:	080023bb 	.word	0x080023bb
 8002164:	080023bb 	.word	0x080023bb
 8002168:	080023bb 	.word	0x080023bb
 800216c:	080023bb 	.word	0x080023bb
 8002170:	080023bb 	.word	0x080023bb
 8002174:	080023bb 	.word	0x080023bb
 8002178:	080021af 	.word	0x080021af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217c:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002188:	4b91      	ldr	r3, [pc, #580]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	4a90      	ldr	r2, [pc, #576]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800219a:	e111      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800219c:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800219e:	61bb      	str	r3, [r7, #24]
      break;
 80021a0:	e10e      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021a4:	61bb      	str	r3, [r7, #24]
      break;
 80021a6:	e10b      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021a8:	4b8c      	ldr	r3, [pc, #560]	; (80023dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021aa:	61bb      	str	r3, [r7, #24]
      break;
 80021ac:	e108      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021b8:	4b85      	ldr	r3, [pc, #532]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021c4:	4b82      	ldr	r3, [pc, #520]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80021ce:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80e1 	beq.w	80023b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	f000 8083 	beq.w	8002300 <HAL_RCC_GetSysClockFreq+0x204>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	f200 80a1 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x248>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x114>
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d056      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800220e:	e099      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002210:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d02d      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800221c:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	4a6b      	ldr	r2, [pc, #428]	; (80023d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002246:	4b62      	ldr	r3, [pc, #392]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002256:	ed97 6a02 	vldr	s12, [r7, #8]
 800225a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800225e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002272:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002276:	e087      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002282:	eddf 6a58 	vldr	s13, [pc, #352]	; 80023e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228a:	4b51      	ldr	r3, [pc, #324]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002292:	ee07 3a90 	vmov	s15, r3
 8002296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229a:	ed97 6a02 	vldr	s12, [r7, #8]
 800229e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ba:	e065      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ce:	4b40      	ldr	r3, [pc, #256]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022de:	ed97 6a02 	vldr	s12, [r7, #8]
 80022e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022fe:	e043      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80023ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002312:	4b2f      	ldr	r3, [pc, #188]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231a:	ee07 3a90 	vmov	s15, r3
 800231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002322:	ed97 6a02 	vldr	s12, [r7, #8]
 8002326:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002342:	e021      	b.n	8002388 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80023e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	ed97 6a02 	vldr	s12, [r7, #8]
 800236a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80023e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800236e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800237a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800237e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002386:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002392:	3301      	adds	r3, #1
 8002394:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80023a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ac:	ee17 3a90 	vmov	r3, s15
 80023b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
      break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023ba:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023bc:	61bb      	str	r3, [r7, #24]
      break;
 80023be:	bf00      	nop
  }

  return sysclockfreq;
 80023c0:	69bb      	ldr	r3, [r7, #24]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	58024400 	.word	0x58024400
 80023d4:	03d09000 	.word	0x03d09000
 80023d8:	003d0900 	.word	0x003d0900
 80023dc:	017d7840 	.word	0x017d7840
 80023e0:	46000000 	.word	0x46000000
 80023e4:	4c742400 	.word	0x4c742400
 80023e8:	4a742400 	.word	0x4a742400
 80023ec:	4bbebc20 	.word	0x4bbebc20

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80023f6:	f7ff fe81 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	490f      	ldr	r1, [pc, #60]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 8002408:	5ccb      	ldrb	r3, [r1, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	fa22 f303 	lsr.w	r3, r2, r3
 8002412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_GetHCLKFreq+0x50>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_RCC_GetHCLKFreq+0x54>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	fa22 f303 	lsr.w	r3, r2, r3
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 800242c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_RCC_GetHCLKFreq+0x58>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	58024400 	.word	0x58024400
 8002444:	08006ec0 	.word	0x08006ec0
 8002448:	2400000c 	.word	0x2400000c
 800244c:	24000008 	.word	0x24000008

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002454:	f7ff ffcc 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	08006ec0 	.word	0x08006ec0

0800247c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002480:	f7ff ffb6 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4904      	ldr	r1, [pc, #16]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	58024400 	.word	0x58024400
 80024a4:	08006ec0 	.word	0x08006ec0

080024a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ac:	b0ca      	sub	sp, #296	; 0x128
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80024cc:	2500      	movs	r5, #0
 80024ce:	ea54 0305 	orrs.w	r3, r4, r5
 80024d2:	d049      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80024d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024de:	d02f      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80024e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024e4:	d828      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ea:	d01a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024f0:	d822      	bhi.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80024f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fa:	d007      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024fc:	e01c      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024fe:	4bb8      	ldr	r3, [pc, #736]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	4ab7      	ldr	r2, [pc, #732]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800250a:	e01a      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800250c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002510:	3308      	adds	r3, #8
 8002512:	2102      	movs	r1, #2
 8002514:	4618      	mov	r0, r3
 8002516:	f001 fc8f 	bl	8003e38 <RCCEx_PLL2_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002520:	e00f      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002526:	3328      	adds	r3, #40	; 0x28
 8002528:	2102      	movs	r1, #2
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fd36 	bl	8003f9c <RCCEx_PLL3_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002536:	e004      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800253e:	e000      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10a      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800254a:	4ba5      	ldr	r3, [pc, #660]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002558:	4aa1      	ldr	r2, [pc, #644]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800255a:	430b      	orrs	r3, r1
 800255c:	6513      	str	r3, [r2, #80]	; 0x50
 800255e:	e003      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002574:	f04f 0900 	mov.w	r9, #0
 8002578:	ea58 0309 	orrs.w	r3, r8, r9
 800257c:	d047      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800257e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	2b04      	cmp	r3, #4
 8002586:	d82a      	bhi.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002588:	a201      	add	r2, pc, #4	; (adr r2, 8002590 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800258a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258e:	bf00      	nop
 8002590:	080025a5 	.word	0x080025a5
 8002594:	080025b3 	.word	0x080025b3
 8002598:	080025c9 	.word	0x080025c9
 800259c:	080025e7 	.word	0x080025e7
 80025a0:	080025e7 	.word	0x080025e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a4:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	4a8d      	ldr	r2, [pc, #564]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025b0:	e01a      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025b6:	3308      	adds	r3, #8
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 fc3c 	bl	8003e38 <RCCEx_PLL2_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025c6:	e00f      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025cc:	3328      	adds	r3, #40	; 0x28
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fce3 	bl	8003f9c <RCCEx_PLL3_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025dc:	e004      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025e4:	e000      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80025e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10a      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f0:	4b7b      	ldr	r3, [pc, #492]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f4:	f023 0107 	bic.w	r1, r3, #7
 80025f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4a78      	ldr	r2, [pc, #480]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002600:	430b      	orrs	r3, r1
 8002602:	6513      	str	r3, [r2, #80]	; 0x50
 8002604:	e003      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800260a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800260e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800261a:	f04f 0b00 	mov.w	fp, #0
 800261e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002622:	d04c      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800262e:	d030      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002634:	d829      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002636:	2bc0      	cmp	r3, #192	; 0xc0
 8002638:	d02d      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800263a:	2bc0      	cmp	r3, #192	; 0xc0
 800263c:	d825      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800263e:	2b80      	cmp	r3, #128	; 0x80
 8002640:	d018      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002642:	2b80      	cmp	r3, #128	; 0x80
 8002644:	d821      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d007      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800264e:	e01c      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002650:	4b63      	ldr	r3, [pc, #396]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	4a62      	ldr	r2, [pc, #392]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800265c:	e01c      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002662:	3308      	adds	r3, #8
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f001 fbe6 	bl	8003e38 <RCCEx_PLL2_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002672:	e011      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002678:	3328      	adds	r3, #40	; 0x28
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fc8d 	bl	8003f9c <RCCEx_PLL3_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002688:	e006      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002690:	e002      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002692:	bf00      	nop
 8002694:	e000      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002698:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026a0:	4b4f      	ldr	r3, [pc, #316]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80026a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	4a4c      	ldr	r2, [pc, #304]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026b0:	430b      	orrs	r3, r1
 80026b2:	6513      	str	r3, [r2, #80]	; 0x50
 80026b4:	e003      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80026ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80026ce:	2300      	movs	r3, #0
 80026d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026d4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80026d8:	460b      	mov	r3, r1
 80026da:	4313      	orrs	r3, r2
 80026dc:	d053      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026ea:	d035      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80026ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026f0:	d82e      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026f6:	d031      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80026f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026fc:	d828      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	d01a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002708:	d822      	bhi.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800270e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002712:	d007      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002714:	e01c      	b.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002716:	4b32      	ldr	r3, [pc, #200]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	4a31      	ldr	r2, [pc, #196]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800271c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002722:	e01c      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002728:	3308      	adds	r3, #8
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f001 fb83 	bl	8003e38 <RCCEx_PLL2_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002738:	e011      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800273a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800273e:	3328      	adds	r3, #40	; 0x28
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f001 fc2a 	bl	8003f9c <RCCEx_PLL3_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800274e:	e006      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002756:	e002      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002758:	bf00      	nop
 800275a:	e000      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800275c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800275e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002772:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002778:	430b      	orrs	r3, r1
 800277a:	6593      	str	r3, [r2, #88]	; 0x58
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002792:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002796:	2300      	movs	r3, #0
 8002798:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800279c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027a0:	460b      	mov	r3, r1
 80027a2:	4313      	orrs	r3, r2
 80027a4:	d056      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	d038      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b8:	d831      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027be:	d034      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80027c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027c4:	d82b      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ca:	d01d      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80027cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027d0:	d825      	bhi.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80027d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027dc:	e01f      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027de:	bf00      	nop
 80027e0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e4:	4ba2      	ldr	r3, [pc, #648]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4aa1      	ldr	r2, [pc, #644]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027f0:	e01c      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f6:	3308      	adds	r3, #8
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fb1c 	bl	8003e38 <RCCEx_PLL2_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002806:	e011      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280c:	3328      	adds	r3, #40	; 0x28
 800280e:	2100      	movs	r1, #0
 8002810:	4618      	mov	r0, r3
 8002812:	f001 fbc3 	bl	8003f9c <RCCEx_PLL3_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800281c:	e006      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002824:	e002      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800282a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10b      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002834:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002840:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002844:	4a8a      	ldr	r2, [pc, #552]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002846:	430b      	orrs	r3, r1
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
 800284a:	e003      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002850:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002864:	2300      	movs	r3, #0
 8002866:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800286a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800286e:	460b      	mov	r3, r1
 8002870:	4313      	orrs	r3, r2
 8002872:	d03a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	2b30      	cmp	r3, #48	; 0x30
 800287c:	d01f      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x416>
 800287e:	2b30      	cmp	r3, #48	; 0x30
 8002880:	d819      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002882:	2b20      	cmp	r3, #32
 8002884:	d00c      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002886:	2b20      	cmp	r3, #32
 8002888:	d815      	bhi.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d019      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800288e:	2b10      	cmp	r3, #16
 8002890:	d111      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002892:	4b77      	ldr	r3, [pc, #476]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	4a76      	ldr	r2, [pc, #472]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800289e:	e011      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a4:	3308      	adds	r3, #8
 80028a6:	2102      	movs	r1, #2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fac5 	bl	8003e38 <RCCEx_PLL2_Config>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028b4:	e006      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028bc:	e002      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80028d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028dc:	430b      	orrs	r3, r1
 80028de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e0:	e003      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80028ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80028f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80028fa:	2300      	movs	r3, #0
 80028fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002900:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002904:	460b      	mov	r3, r1
 8002906:	4313      	orrs	r3, r2
 8002908:	d051      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800290a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800290e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002914:	d035      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002916:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800291a:	d82e      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800291c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002920:	d031      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002926:	d828      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292c:	d01a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800292e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002932:	d822      	bhi.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293c:	d007      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800293e:	e01c      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002940:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	4a4a      	ldr	r2, [pc, #296]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800294c:	e01c      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002952:	3308      	adds	r3, #8
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fa6e 	bl	8003e38 <RCCEx_PLL2_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002962:	e011      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002968:	3328      	adds	r3, #40	; 0x28
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f001 fb15 	bl	8003f9c <RCCEx_PLL3_Config>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002978:	e006      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002980:	e002      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002982:	bf00      	nop
 8002984:	e000      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002986:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002990:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	4a34      	ldr	r2, [pc, #208]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029a0:	430b      	orrs	r3, r1
 80029a2:	6513      	str	r3, [r2, #80]	; 0x50
 80029a4:	e003      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80029ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029be:	2300      	movs	r3, #0
 80029c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80029c8:	460b      	mov	r3, r1
 80029ca:	4313      	orrs	r3, r2
 80029cc:	d056      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d8:	d033      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80029da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029de:	d82c      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e4:	d02f      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80029e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ea:	d826      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f0:	d02b      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80029f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f6:	d820      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80029f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029fc:	d012      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80029fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a02:	d81a      	bhi.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d022      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d115      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a12:	3308      	adds	r3, #8
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fa0e 	bl	8003e38 <RCCEx_PLL2_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a22:	e015      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a28:	3328      	adds	r3, #40	; 0x28
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fab5 	bl	8003f9c <RCCEx_PLL3_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a38:	e00a      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a40:	e006      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a42:	bf00      	nop
 8002a44:	e004      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a46:	bf00      	nop
 8002a48:	e002      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a66:	4a02      	ldr	r2, [pc, #8]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a6c:	e006      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a6e:	bf00      	nop
 8002a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	d055      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d033      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aae:	d82c      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab4:	d02f      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aba:	d826      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac0:	d02b      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ac6:	d820      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d012      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad2:	d81a      	bhi.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d022      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002adc:	d115      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 f9a6 	bl	8003e38 <RCCEx_PLL2_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002af2:	e015      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af8:	3328      	adds	r3, #40	; 0x28
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 fa4d 	bl	8003f9c <RCCEx_PLL3_Config>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b08:	e00a      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b10:	e006      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b28:	4ba3      	ldr	r3, [pc, #652]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b38:	4a9f      	ldr	r2, [pc, #636]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3e:	e003      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b62:	460b      	mov	r3, r1
 8002b64:	4313      	orrs	r3, r2
 8002b66:	d037      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b72:	d00e      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b78:	d816      	bhi.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d018      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b82:	d111      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b84:	4b8c      	ldr	r3, [pc, #560]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	4a8b      	ldr	r2, [pc, #556]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b90:	e00f      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b96:	3308      	adds	r3, #8
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 f94c 	bl	8003e38 <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002ba6:	e004      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bae:	e000      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10a      	bne.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bba:	4b7f      	ldr	r3, [pc, #508]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a7b      	ldr	r2, [pc, #492]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bca:	430b      	orrs	r3, r1
 8002bcc:	6513      	str	r3, [r2, #80]	; 0x50
 8002bce:	e003      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	d039      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d81c      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c45 	.word	0x08002c45
 8002c0c:	08002c19 	.word	0x08002c19
 8002c10:	08002c27 	.word	0x08002c27
 8002c14:	08002c45 	.word	0x08002c45
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c18:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4a66      	ldr	r2, [pc, #408]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c24:	e00f      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	2102      	movs	r1, #2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 f902 	bl	8003e38 <RCCEx_PLL2_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c52:	f023 0103 	bic.w	r1, r3, #3
 8002c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	4a56      	ldr	r2, [pc, #344]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c62:	e003      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c74:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c86:	460b      	mov	r3, r1
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f000 809f 	beq.w	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c8e:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4a      	ldr	r2, [pc, #296]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c9a:	f7fd fd7d 	bl	8000798 <HAL_GetTick>
 8002c9e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca4:	f7fd fd78 	bl	8000798 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d903      	bls.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cba:	e005      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbc:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0ed      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d179      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cd0:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cdc:	4053      	eors	r3, r2
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d015      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce6:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cfe:	4b2e      	ldr	r3, [pc, #184]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d0a:	4a2b      	ldr	r2, [pc, #172]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d10:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d118      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fd fd3a 	bl	8000798 <HAL_GetTick>
 8002d24:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d28:	e00d      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2a:	f7fd fd35 	bl	8000798 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d34:	1ad2      	subs	r2, r2, r3
 8002d36:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d903      	bls.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002d44:	e005      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0eb      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d129      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6a:	d10e      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d7c:	091a      	lsrs	r2, r3, #4
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6113      	str	r3, [r2, #16]
 8002d88:	e005      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d94:	6113      	str	r3, [r2, #16]
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d98:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	e00e      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002db6:	e009      	b.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58024800 	.word	0x58024800
 8002dc0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f002 0301 	and.w	r3, r2, #1
 8002dd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002de2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f000 8089 	beq.w	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	2b28      	cmp	r3, #40	; 0x28
 8002df6:	d86b      	bhi.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002ed9 	.word	0x08002ed9
 8002e04:	08002ed1 	.word	0x08002ed1
 8002e08:	08002ed1 	.word	0x08002ed1
 8002e0c:	08002ed1 	.word	0x08002ed1
 8002e10:	08002ed1 	.word	0x08002ed1
 8002e14:	08002ed1 	.word	0x08002ed1
 8002e18:	08002ed1 	.word	0x08002ed1
 8002e1c:	08002ed1 	.word	0x08002ed1
 8002e20:	08002ea5 	.word	0x08002ea5
 8002e24:	08002ed1 	.word	0x08002ed1
 8002e28:	08002ed1 	.word	0x08002ed1
 8002e2c:	08002ed1 	.word	0x08002ed1
 8002e30:	08002ed1 	.word	0x08002ed1
 8002e34:	08002ed1 	.word	0x08002ed1
 8002e38:	08002ed1 	.word	0x08002ed1
 8002e3c:	08002ed1 	.word	0x08002ed1
 8002e40:	08002ebb 	.word	0x08002ebb
 8002e44:	08002ed1 	.word	0x08002ed1
 8002e48:	08002ed1 	.word	0x08002ed1
 8002e4c:	08002ed1 	.word	0x08002ed1
 8002e50:	08002ed1 	.word	0x08002ed1
 8002e54:	08002ed1 	.word	0x08002ed1
 8002e58:	08002ed1 	.word	0x08002ed1
 8002e5c:	08002ed1 	.word	0x08002ed1
 8002e60:	08002ed9 	.word	0x08002ed9
 8002e64:	08002ed1 	.word	0x08002ed1
 8002e68:	08002ed1 	.word	0x08002ed1
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	08002ed1 	.word	0x08002ed1
 8002e74:	08002ed1 	.word	0x08002ed1
 8002e78:	08002ed1 	.word	0x08002ed1
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002ed9 	.word	0x08002ed9
 8002e84:	08002ed1 	.word	0x08002ed1
 8002e88:	08002ed1 	.word	0x08002ed1
 8002e8c:	08002ed1 	.word	0x08002ed1
 8002e90:	08002ed1 	.word	0x08002ed1
 8002e94:	08002ed1 	.word	0x08002ed1
 8002e98:	08002ed1 	.word	0x08002ed1
 8002e9c:	08002ed1 	.word	0x08002ed1
 8002ea0:	08002ed9 	.word	0x08002ed9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ffc3 	bl	8003e38 <RCCEx_PLL2_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eb8:	e00f      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ebe:	3328      	adds	r3, #40	; 0x28
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f86a 	bl	8003f9c <RCCEx_PLL3_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ece:	e004      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ed6:	e000      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ee2:	4bbf      	ldr	r3, [pc, #764]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef0:	4abb      	ldr	r2, [pc, #748]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ef2:	430b      	orrs	r3, r1
 8002ef4:	6553      	str	r3, [r2, #84]	; 0x54
 8002ef6:	e003      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002efc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f002 0302 	and.w	r3, r2, #2
 8002f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f10:	2300      	movs	r3, #0
 8002f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f16:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	d041      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d824      	bhi.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002f2a:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f7d 	.word	0x08002f7d
 8002f34:	08002f49 	.word	0x08002f49
 8002f38:	08002f5f 	.word	0x08002f5f
 8002f3c:	08002f7d 	.word	0x08002f7d
 8002f40:	08002f7d 	.word	0x08002f7d
 8002f44:	08002f7d 	.word	0x08002f7d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 ff71 	bl	8003e38 <RCCEx_PLL2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f5c:	e00f      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f62:	3328      	adds	r3, #40	; 0x28
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 f818 	bl	8003f9c <RCCEx_PLL3_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f86:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f023 0107 	bic.w	r1, r3, #7
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f94:	4a92      	ldr	r2, [pc, #584]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f96:	430b      	orrs	r3, r1
 8002f98:	6553      	str	r3, [r2, #84]	; 0x54
 8002f9a:	e003      	b.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fac:	f002 0304 	and.w	r3, r2, #4
 8002fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d044      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fcc:	2b05      	cmp	r3, #5
 8002fce:	d825      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002fd0:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd6:	bf00      	nop
 8002fd8:	08003025 	.word	0x08003025
 8002fdc:	08002ff1 	.word	0x08002ff1
 8002fe0:	08003007 	.word	0x08003007
 8002fe4:	08003025 	.word	0x08003025
 8002fe8:	08003025 	.word	0x08003025
 8002fec:	08003025 	.word	0x08003025
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 ff1d 	bl	8003e38 <RCCEx_PLL2_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003004:	e00f      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800300a:	3328      	adds	r3, #40	; 0x28
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f000 ffc4 	bl	8003f9c <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800301a:	e004      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10b      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800302e:	4b6c      	ldr	r3, [pc, #432]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003032:	f023 0107 	bic.w	r1, r3, #7
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303e:	4a68      	ldr	r2, [pc, #416]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003040:	430b      	orrs	r3, r1
 8003042:	6593      	str	r3, [r2, #88]	; 0x58
 8003044:	e003      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800304a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800304e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f002 0320 	and.w	r3, r2, #32
 800305a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800305e:	2300      	movs	r3, #0
 8003060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003068:	460b      	mov	r3, r1
 800306a:	4313      	orrs	r3, r2
 800306c:	d055      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800306e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307a:	d033      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800307c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003080:	d82c      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003086:	d02f      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d826      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800308e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003092:	d02b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003098:	d820      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800309a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309e:	d012      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80030a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030a4:	d81a      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d022      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80030aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030ae:	d115      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b4:	3308      	adds	r3, #8
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 febd 	bl	8003e38 <RCCEx_PLL2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030c4:	e015      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ca:	3328      	adds	r3, #40	; 0x28
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 ff64 	bl	8003f9c <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030da:	e00a      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030e2:	e006      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030e4:	bf00      	nop
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80030f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310a:	4a35      	ldr	r2, [pc, #212]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800310c:	430b      	orrs	r3, r1
 800310e:	6553      	str	r3, [r2, #84]	; 0x54
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003116:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003130:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003134:	460b      	mov	r3, r1
 8003136:	4313      	orrs	r3, r2
 8003138:	d058      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003142:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003146:	d033      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003148:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800314c:	d82c      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d02f      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d826      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800315a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800315e:	d02b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003164:	d820      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316a:	d012      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800316c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003170:	d81a      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d022      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317a:	d115      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003180:	3308      	adds	r3, #8
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fe57 	bl	8003e38 <RCCEx_PLL2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003190:	e015      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fefe 	bl	8003f9c <RCCEx_PLL3_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031a6:	e00a      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031ae:	e006      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031b0:	bf00      	nop
 80031b2:	e004      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10e      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80031ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031d6:	4a02      	ldr	r2, [pc, #8]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031d8:	430b      	orrs	r3, r1
 80031da:	6593      	str	r3, [r2, #88]	; 0x58
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003202:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003206:	460b      	mov	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	d055      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003214:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003218:	d033      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800321a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800321e:	d82c      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003224:	d02f      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322a:	d826      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800322c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003230:	d02b      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003232:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003236:	d820      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323c:	d012      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d81a      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d022      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d115      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003252:	3308      	adds	r3, #8
 8003254:	2100      	movs	r1, #0
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fdee 	bl	8003e38 <RCCEx_PLL2_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003262:	e015      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003268:	3328      	adds	r3, #40	; 0x28
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f000 fe95 	bl	8003f9c <RCCEx_PLL3_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003278:	e00a      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003280:	e006      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800328e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10b      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003298:	4ba1      	ldr	r3, [pc, #644]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80032a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032a8:	4a9d      	ldr	r2, [pc, #628]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f002 0308 	and.w	r3, r2, #8
 80032c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ce:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032d2:	460b      	mov	r3, r1
 80032d4:	4313      	orrs	r3, r2
 80032d6:	d01e      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d10c      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ea:	3328      	adds	r3, #40	; 0x28
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fe54 	bl	8003f9c <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003300:	4b87      	ldr	r3, [pc, #540]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003310:	4a83      	ldr	r2, [pc, #524]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003312:	430b      	orrs	r3, r1
 8003314:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f002 0310 	and.w	r3, r2, #16
 8003322:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800332c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d01e      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d10c      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003348:	3328      	adds	r3, #40	; 0x28
 800334a:	2102      	movs	r1, #2
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fe25 	bl	8003f9c <RCCEx_PLL3_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800335e:	4b70      	ldr	r3, [pc, #448]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800336a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800336e:	4a6c      	ldr	r2, [pc, #432]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003370:	430b      	orrs	r3, r1
 8003372:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800338a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d03e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800339c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a0:	d022      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80033a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033a6:	d81b      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d00b      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80033b2:	e015      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b8:	3308      	adds	r3, #8
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fd3b 	bl	8003e38 <RCCEx_PLL2_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033c8:	e00f      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ce:	3328      	adds	r3, #40	; 0x28
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fde2 	bl	8003f9c <RCCEx_PLL3_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033de:	e004      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80033e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10b      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033f2:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003402:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003404:	430b      	orrs	r3, r1
 8003406:	6593      	str	r3, [r2, #88]	; 0x58
 8003408:	e003      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800340e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800341e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003420:	2300      	movs	r3, #0
 8003422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003424:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003428:	460b      	mov	r3, r1
 800342a:	4313      	orrs	r3, r2
 800342c:	d03b      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003436:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800343a:	d01f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800343c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003440:	d818      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003446:	d003      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344c:	d007      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800344e:	e011      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	4a32      	ldr	r2, [pc, #200]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003462:	3328      	adds	r3, #40	; 0x28
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fd98 	bl	8003f9c <RCCEx_PLL3_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003472:	e004      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800347c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	4a22      	ldr	r2, [pc, #136]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003498:	430b      	orrs	r3, r1
 800349a:	6553      	str	r3, [r2, #84]	; 0x54
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80034b2:	673b      	str	r3, [r7, #112]	; 0x70
 80034b4:	2300      	movs	r3, #0
 80034b6:	677b      	str	r3, [r7, #116]	; 0x74
 80034b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034bc:	460b      	mov	r3, r1
 80034be:	4313      	orrs	r3, r2
 80034c0:	d034      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d007      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80034d2:	e011      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034e0:	e00e      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e6:	3308      	adds	r3, #8
 80034e8:	2102      	movs	r1, #2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fca4 	bl	8003e38 <RCCEx_PLL2_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003500:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	4a02      	ldr	r2, [pc, #8]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003518:	430b      	orrs	r3, r1
 800351a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800351e:	bf00      	nop
 8003520:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003528:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003538:	66bb      	str	r3, [r7, #104]	; 0x68
 800353a:	2300      	movs	r3, #0
 800353c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800353e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003542:	460b      	mov	r3, r1
 8003544:	4313      	orrs	r3, r2
 8003546:	d00c      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	3328      	adds	r3, #40	; 0x28
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd23 	bl	8003f9c <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800356e:	663b      	str	r3, [r7, #96]	; 0x60
 8003570:	2300      	movs	r3, #0
 8003572:	667b      	str	r3, [r7, #100]	; 0x64
 8003574:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003578:	460b      	mov	r3, r1
 800357a:	4313      	orrs	r3, r2
 800357c:	d038      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358a:	d018      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800358c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003590:	d811      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003596:	d014      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359c:	d80b      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d011      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80035a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a6:	d106      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a8:	4bc3      	ldr	r3, [pc, #780]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	4ac2      	ldr	r2, [pc, #776]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035b4:	e008      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035bc:	e004      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035d0:	4bb9      	ldr	r3, [pc, #740]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e0:	4ab5      	ldr	r2, [pc, #724]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6553      	str	r3, [r2, #84]	; 0x54
 80035e6:	e003      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80035fe:	2300      	movs	r3, #0
 8003600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003602:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800360c:	4baa      	ldr	r3, [pc, #680]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	4aa7      	ldr	r2, [pc, #668]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800361c:	430b      	orrs	r3, r1
 800361e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003628:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800362c:	653b      	str	r3, [r7, #80]	; 0x50
 800362e:	2300      	movs	r3, #0
 8003630:	657b      	str	r3, [r7, #84]	; 0x54
 8003632:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800363c:	4b9e      	ldr	r3, [pc, #632]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800364c:	4a9a      	ldr	r2, [pc, #616]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800364e:	430b      	orrs	r3, r1
 8003650:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800365e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003660:	2300      	movs	r3, #0
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800366e:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	4a8e      	ldr	r2, [pc, #568]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800367e:	430b      	orrs	r3, r1
 8003680:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
 8003690:	2300      	movs	r3, #0
 8003692:	647b      	str	r3, [r7, #68]	; 0x44
 8003694:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800369e:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4a85      	ldr	r2, [pc, #532]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80036a8:	6113      	str	r3, [r2, #16]
 80036aa:	4b83      	ldr	r3, [pc, #524]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ac:	6919      	ldr	r1, [r3, #16]
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036b6:	4a80      	ldr	r2, [pc, #512]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80036c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036ca:	2300      	movs	r3, #0
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036d8:	4b77      	ldr	r3, [pc, #476]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e6:	4a74      	ldr	r2, [pc, #464]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036f8:	633b      	str	r3, [r7, #48]	; 0x30
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
 80036fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003702:	460b      	mov	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003718:	4a67      	ldr	r2, [pc, #412]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	2100      	movs	r1, #0
 8003728:	62b9      	str	r1, [r7, #40]	; 0x28
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003730:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d011      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	3308      	adds	r3, #8
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fb78 	bl	8003e38 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	2100      	movs	r1, #0
 8003768:	6239      	str	r1, [r7, #32]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	627b      	str	r3, [r7, #36]	; 0x24
 8003770:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003774:	460b      	mov	r3, r1
 8003776:	4313      	orrs	r3, r2
 8003778:	d011      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	3308      	adds	r3, #8
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fb58 	bl	8003e38 <RCCEx_PLL2_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800378e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800379a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	2100      	movs	r1, #0
 80037a8:	61b9      	str	r1, [r7, #24]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037b4:	460b      	mov	r3, r1
 80037b6:	4313      	orrs	r3, r2
 80037b8:	d011      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	3308      	adds	r3, #8
 80037c0:	2102      	movs	r1, #2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fb38 	bl	8003e38 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80037ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	2100      	movs	r1, #0
 80037e8:	6139      	str	r1, [r7, #16]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d011      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	3328      	adds	r3, #40	; 0x28
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fbca 	bl	8003f9c <RCCEx_PLL3_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003816:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800381a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	2100      	movs	r1, #0
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	f003 0310 	and.w	r3, r3, #16
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d011      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	3328      	adds	r3, #40	; 0x28
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fbaa 	bl	8003f9c <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800384e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003856:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	2100      	movs	r1, #0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	607b      	str	r3, [r7, #4]
 8003870:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003874:	460b      	mov	r3, r1
 8003876:	4313      	orrs	r3, r2
 8003878:	d011      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387e:	3328      	adds	r3, #40	; 0x28
 8003880:	2102      	movs	r1, #2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb8a 	bl	8003f9c <RCCEx_PLL3_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800389a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800389e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80038b2:	46bd      	mov	sp, r7
 80038b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038b8:	58024400 	.word	0x58024400

080038bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038c0:	f7fe fd96 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038dc:	4618      	mov	r0, r3
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	58024400 	.word	0x58024400
 80038e4:	08006ec0 	.word	0x08006ec0

080038e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038f0:	4ba1      	ldr	r3, [pc, #644]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038fa:	4b9f      	ldr	r3, [pc, #636]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	0b1b      	lsrs	r3, r3, #12
 8003900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003904:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003906:	4b9c      	ldr	r3, [pc, #624]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	091b      	lsrs	r3, r3, #4
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003912:	4b99      	ldr	r3, [pc, #612]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	08db      	lsrs	r3, r3, #3
 8003918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800392a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8111 	beq.w	8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	f000 8083 	beq.w	8003a44 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	f200 80a1 	bhi.w	8003a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d056      	beq.n	8003a00 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003952:	e099      	b.n	8003a88 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003954:	4b88      	ldr	r3, [pc, #544]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d02d      	beq.n	80039bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	08db      	lsrs	r3, r3, #3
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	4a84      	ldr	r2, [pc, #528]	; (8003b7c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	ee07 3a90 	vmov	s15, r3
 8003978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800398a:	4b7b      	ldr	r3, [pc, #492]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800399a:	ed97 6a03 	vldr	s12, [r7, #12]
 800399e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039ba:	e087      	b.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b84 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ce:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039de:	ed97 6a03 	vldr	s12, [r7, #12]
 80039e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039fe:	e065      	b.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	ee07 3a90 	vmov	s15, r3
 8003a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a42:	e043      	b.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a56:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a86:	e021      	b.n	8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a9a:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	0a5b      	lsrs	r3, r3, #9
 8003ad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ae6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003af2:	ee17 2a90 	vmov	r2, s15
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b20:	ee17 2a90 	vmov	r2, s15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4e:	ee17 2a90 	vmov	r2, s15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	3724      	adds	r7, #36	; 0x24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	03d09000 	.word	0x03d09000
 8003b80:	46000000 	.word	0x46000000
 8003b84:	4c742400 	.word	0x4c742400
 8003b88:	4a742400 	.word	0x4a742400
 8003b8c:	4bbebc20 	.word	0x4bbebc20

08003b90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b98:	4ba1      	ldr	r3, [pc, #644]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003ba2:	4b9f      	ldr	r3, [pc, #636]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	0d1b      	lsrs	r3, r3, #20
 8003ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003bae:	4b9c      	ldr	r3, [pc, #624]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	0a1b      	lsrs	r3, r3, #8
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003bba:	4b99      	ldr	r3, [pc, #612]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	08db      	lsrs	r3, r3, #3
 8003bc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8111 	beq.w	8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	f000 8083 	beq.w	8003cec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	f200 80a1 	bhi.w	8003d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d056      	beq.n	8003ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bfa:	e099      	b.n	8003d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bfc:	4b88      	ldr	r3, [pc, #544]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02d      	beq.n	8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c08:	4b85      	ldr	r3, [pc, #532]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	08db      	lsrs	r3, r3, #3
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	4a84      	ldr	r2, [pc, #528]	; (8003e24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c14:	fa22 f303 	lsr.w	r3, r2, r3
 8003c18:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	ee07 3a90 	vmov	s15, r3
 8003c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c46:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c62:	e087      	b.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c76:	4b6a      	ldr	r3, [pc, #424]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c8a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ca6:	e065      	b.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	ee07 3a90 	vmov	s15, r3
 8003cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cba:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cea:	e043      	b.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cfe:	4b48      	ldr	r3, [pc, #288]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d2e:	e021      	b.n	8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	0a5b      	lsrs	r3, r3, #9
 8003d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9a:	ee17 2a90 	vmov	r2, s15
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003da2:	4b1f      	ldr	r3, [pc, #124]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003db8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc8:	ee17 2a90 	vmov	r2, s15
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df6:	ee17 2a90 	vmov	r2, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dfe:	e008      	b.n	8003e12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
}
 8003e12:	bf00      	nop
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
 8003e24:	03d09000 	.word	0x03d09000
 8003e28:	46000000 	.word	0x46000000
 8003e2c:	4c742400 	.word	0x4c742400
 8003e30:	4a742400 	.word	0x4a742400
 8003e34:	4bbebc20 	.word	0x4bbebc20

08003e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e46:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d101      	bne.n	8003e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e099      	b.n	8003f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e56:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4e      	ldr	r2, [pc, #312]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e62:	f7fc fc99 	bl	8000798 <HAL_GetTick>
 8003e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e6a:	f7fc fc95 	bl	8000798 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e086      	b.n	8003f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e7c:	4b45      	ldr	r3, [pc, #276]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	031b      	lsls	r3, r3, #12
 8003e96:	493f      	ldr	r1, [pc, #252]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	025b      	lsls	r3, r3, #9
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	041b      	lsls	r3, r3, #16
 8003eba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ecc:	4931      	ldr	r1, [pc, #196]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	492d      	ldr	r1, [pc, #180]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	f023 0220 	bic.w	r2, r3, #32
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	4928      	ldr	r1, [pc, #160]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ef6:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003efc:	f023 0310 	bic.w	r3, r3, #16
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <RCCEx_PLL2_Config+0x160>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	69d2      	ldr	r2, [r2, #28]
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	4920      	ldr	r1, [pc, #128]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f16:	4b1f      	ldr	r3, [pc, #124]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f1c:	f043 0310 	orr.w	r3, r3, #16
 8003f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f34:	e00f      	b.n	8003f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d106      	bne.n	8003f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	4a14      	ldr	r2, [pc, #80]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f48:	e005      	b.n	8003f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f62:	f7fc fc19 	bl	8000798 <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f68:	e008      	b.n	8003f7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f6a:	f7fc fc15 	bl	8000798 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e006      	b.n	8003f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <RCCEx_PLL2_Config+0x15c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	58024400 	.word	0x58024400
 8003f98:	ffff0007 	.word	0xffff0007

08003f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d101      	bne.n	8003fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e099      	b.n	80040ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc6:	f7fc fbe7 	bl	8000798 <HAL_GetTick>
 8003fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fce:	f7fc fbe3 	bl	8000798 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e086      	b.n	80040ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	051b      	lsls	r3, r3, #20
 8003ffa:	493f      	ldr	r1, [pc, #252]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b01      	subs	r3, #1
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	025b      	lsls	r3, r3, #9
 8004012:	b29b      	uxth	r3, r3
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	3b01      	subs	r3, #1
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004030:	4931      	ldr	r1, [pc, #196]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4928      	ldr	r1, [pc, #160]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <RCCEx_PLL3_Config+0x160>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	69d2      	ldr	r2, [r2, #28]
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4920      	ldr	r1, [pc, #128]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 8004092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e00f      	b.n	80040ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ac:	e005      	b.n	80040ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c6:	f7fc fb67 	bl	8000798 <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ce:	f7fc fb63 	bl	8000798 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <RCCEx_PLL3_Config+0x15c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	ffff0007 	.word	0xffff0007

08004100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e042      	b.n	8004198 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f001 fc61 	bl	80059ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2224      	movs	r2, #36	; 0x24
 800412e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0201 	bic.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 fe1e 	bl	8004d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8b3 	bl	80042bc <UART_SetConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e01b      	b.n	8004198 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800416e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800417e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fe9d 	bl	8004ed0 <UART_CheckIdleState>
 8004196:	4603      	mov	r3, r0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	2b20      	cmp	r3, #32
 80041b8:	d17b      	bne.n	80042b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_UART_Transmit+0x26>
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e074      	b.n	80042b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2221      	movs	r2, #33	; 0x21
 80041d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041da:	f7fc fadd 	bl	8000798 <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	88fa      	ldrh	r2, [r7, #6]
 80041e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	d108      	bne.n	800420c <HAL_UART_Transmit+0x6c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e003      	b.n	8004214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004214:	e030      	b.n	8004278 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 feff 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e03d      	b.n	80042b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3302      	adds	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e007      	b.n	8004266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1c8      	bne.n	8004216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fec8 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e006      	b.n	80042b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e000      	b.n	80042b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b092      	sub	sp, #72	; 0x48
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	431a      	orrs	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4bbe      	ldr	r3, [pc, #760]	; (80045e4 <UART_SetConfig+0x328>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f4:	430b      	orrs	r3, r1
 80042f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4ab3      	ldr	r2, [pc, #716]	; (80045e8 <UART_SetConfig+0x32c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004324:	4313      	orrs	r3, r2
 8004326:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	4baf      	ldr	r3, [pc, #700]	; (80045ec <UART_SetConfig+0x330>)
 8004330:	4013      	ands	r3, r2
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f023 010f 	bic.w	r1, r3, #15
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4aa6      	ldr	r2, [pc, #664]	; (80045f0 <UART_SetConfig+0x334>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d177      	bne.n	800444c <UART_SetConfig+0x190>
 800435c:	4ba5      	ldr	r3, [pc, #660]	; (80045f4 <UART_SetConfig+0x338>)
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004364:	2b28      	cmp	r3, #40	; 0x28
 8004366:	d86d      	bhi.n	8004444 <UART_SetConfig+0x188>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0xb4>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004415 	.word	0x08004415
 8004374:	08004445 	.word	0x08004445
 8004378:	08004445 	.word	0x08004445
 800437c:	08004445 	.word	0x08004445
 8004380:	08004445 	.word	0x08004445
 8004384:	08004445 	.word	0x08004445
 8004388:	08004445 	.word	0x08004445
 800438c:	08004445 	.word	0x08004445
 8004390:	0800441d 	.word	0x0800441d
 8004394:	08004445 	.word	0x08004445
 8004398:	08004445 	.word	0x08004445
 800439c:	08004445 	.word	0x08004445
 80043a0:	08004445 	.word	0x08004445
 80043a4:	08004445 	.word	0x08004445
 80043a8:	08004445 	.word	0x08004445
 80043ac:	08004445 	.word	0x08004445
 80043b0:	08004425 	.word	0x08004425
 80043b4:	08004445 	.word	0x08004445
 80043b8:	08004445 	.word	0x08004445
 80043bc:	08004445 	.word	0x08004445
 80043c0:	08004445 	.word	0x08004445
 80043c4:	08004445 	.word	0x08004445
 80043c8:	08004445 	.word	0x08004445
 80043cc:	08004445 	.word	0x08004445
 80043d0:	0800442d 	.word	0x0800442d
 80043d4:	08004445 	.word	0x08004445
 80043d8:	08004445 	.word	0x08004445
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004445 	.word	0x08004445
 80043e8:	08004445 	.word	0x08004445
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004435 	.word	0x08004435
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004445 	.word	0x08004445
 8004400:	08004445 	.word	0x08004445
 8004404:	08004445 	.word	0x08004445
 8004408:	08004445 	.word	0x08004445
 800440c:	08004445 	.word	0x08004445
 8004410:	0800443d 	.word	0x0800443d
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e222      	b.n	8004862 <UART_SetConfig+0x5a6>
 800441c:	2304      	movs	r3, #4
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e21e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004424:	2308      	movs	r3, #8
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e21a      	b.n	8004862 <UART_SetConfig+0x5a6>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e216      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004434:	2320      	movs	r3, #32
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e212      	b.n	8004862 <UART_SetConfig+0x5a6>
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e20e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e20a      	b.n	8004862 <UART_SetConfig+0x5a6>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a69      	ldr	r2, [pc, #420]	; (80045f8 <UART_SetConfig+0x33c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <UART_SetConfig+0x1fc>
 8004456:	4b67      	ldr	r3, [pc, #412]	; (80045f4 <UART_SetConfig+0x338>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	2b05      	cmp	r3, #5
 8004460:	d826      	bhi.n	80044b0 <UART_SetConfig+0x1f4>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x1ac>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	08004481 	.word	0x08004481
 800446c:	08004489 	.word	0x08004489
 8004470:	08004491 	.word	0x08004491
 8004474:	08004499 	.word	0x08004499
 8004478:	080044a1 	.word	0x080044a1
 800447c:	080044a9 	.word	0x080044a9
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e1ec      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004488:	2304      	movs	r3, #4
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e1e8      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004490:	2308      	movs	r3, #8
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e1e4      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004498:	2310      	movs	r3, #16
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e1e0      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044a0:	2320      	movs	r3, #32
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e1dc      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044a8:	2340      	movs	r3, #64	; 0x40
 80044aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ae:	e1d8      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b6:	e1d4      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a4f      	ldr	r2, [pc, #316]	; (80045fc <UART_SetConfig+0x340>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d130      	bne.n	8004524 <UART_SetConfig+0x268>
 80044c2:	4b4c      	ldr	r3, [pc, #304]	; (80045f4 <UART_SetConfig+0x338>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d826      	bhi.n	800451c <UART_SetConfig+0x260>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <UART_SetConfig+0x218>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044ed 	.word	0x080044ed
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e1b6      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e1b2      	b.n	8004862 <UART_SetConfig+0x5a6>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e1ae      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e1aa      	b.n	8004862 <UART_SetConfig+0x5a6>
 800450c:	2320      	movs	r3, #32
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004512:	e1a6      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004514:	2340      	movs	r3, #64	; 0x40
 8004516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800451a:	e1a2      	b.n	8004862 <UART_SetConfig+0x5a6>
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004522:	e19e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a35      	ldr	r2, [pc, #212]	; (8004600 <UART_SetConfig+0x344>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d130      	bne.n	8004590 <UART_SetConfig+0x2d4>
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <UART_SetConfig+0x338>)
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	2b05      	cmp	r3, #5
 8004538:	d826      	bhi.n	8004588 <UART_SetConfig+0x2cc>
 800453a:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <UART_SetConfig+0x284>)
 800453c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004540:	08004559 	.word	0x08004559
 8004544:	08004561 	.word	0x08004561
 8004548:	08004569 	.word	0x08004569
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	2300      	movs	r3, #0
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455e:	e180      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004566:	e17c      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456e:	e178      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004576:	e174      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004578:	2320      	movs	r3, #32
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457e:	e170      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004586:	e16c      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800458e:	e168      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1b      	ldr	r2, [pc, #108]	; (8004604 <UART_SetConfig+0x348>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d142      	bne.n	8004620 <UART_SetConfig+0x364>
 800459a:	4b16      	ldr	r3, [pc, #88]	; (80045f4 <UART_SetConfig+0x338>)
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d838      	bhi.n	8004618 <UART_SetConfig+0x35c>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x2f0>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	080045c5 	.word	0x080045c5
 80045b0:	080045cd 	.word	0x080045cd
 80045b4:	080045d5 	.word	0x080045d5
 80045b8:	080045dd 	.word	0x080045dd
 80045bc:	08004609 	.word	0x08004609
 80045c0:	08004611 	.word	0x08004611
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e14a      	b.n	8004862 <UART_SetConfig+0x5a6>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e146      	b.n	8004862 <UART_SetConfig+0x5a6>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e142      	b.n	8004862 <UART_SetConfig+0x5a6>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e13e      	b.n	8004862 <UART_SetConfig+0x5a6>
 80045e4:	cfff69f3 	.word	0xcfff69f3
 80045e8:	58000c00 	.word	0x58000c00
 80045ec:	11fff4ff 	.word	0x11fff4ff
 80045f0:	40011000 	.word	0x40011000
 80045f4:	58024400 	.word	0x58024400
 80045f8:	40004400 	.word	0x40004400
 80045fc:	40004800 	.word	0x40004800
 8004600:	40004c00 	.word	0x40004c00
 8004604:	40005000 	.word	0x40005000
 8004608:	2320      	movs	r3, #32
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800460e:	e128      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004610:	2340      	movs	r3, #64	; 0x40
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e124      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004618:	2380      	movs	r3, #128	; 0x80
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e120      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4acb      	ldr	r2, [pc, #812]	; (8004954 <UART_SetConfig+0x698>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d176      	bne.n	8004718 <UART_SetConfig+0x45c>
 800462a:	4bcb      	ldr	r3, [pc, #812]	; (8004958 <UART_SetConfig+0x69c>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004632:	2b28      	cmp	r3, #40	; 0x28
 8004634:	d86c      	bhi.n	8004710 <UART_SetConfig+0x454>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0x380>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	080046e1 	.word	0x080046e1
 8004640:	08004711 	.word	0x08004711
 8004644:	08004711 	.word	0x08004711
 8004648:	08004711 	.word	0x08004711
 800464c:	08004711 	.word	0x08004711
 8004650:	08004711 	.word	0x08004711
 8004654:	08004711 	.word	0x08004711
 8004658:	08004711 	.word	0x08004711
 800465c:	080046e9 	.word	0x080046e9
 8004660:	08004711 	.word	0x08004711
 8004664:	08004711 	.word	0x08004711
 8004668:	08004711 	.word	0x08004711
 800466c:	08004711 	.word	0x08004711
 8004670:	08004711 	.word	0x08004711
 8004674:	08004711 	.word	0x08004711
 8004678:	08004711 	.word	0x08004711
 800467c:	080046f1 	.word	0x080046f1
 8004680:	08004711 	.word	0x08004711
 8004684:	08004711 	.word	0x08004711
 8004688:	08004711 	.word	0x08004711
 800468c:	08004711 	.word	0x08004711
 8004690:	08004711 	.word	0x08004711
 8004694:	08004711 	.word	0x08004711
 8004698:	08004711 	.word	0x08004711
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	08004711 	.word	0x08004711
 80046a4:	08004711 	.word	0x08004711
 80046a8:	08004711 	.word	0x08004711
 80046ac:	08004711 	.word	0x08004711
 80046b0:	08004711 	.word	0x08004711
 80046b4:	08004711 	.word	0x08004711
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004711 	.word	0x08004711
 80046c4:	08004711 	.word	0x08004711
 80046c8:	08004711 	.word	0x08004711
 80046cc:	08004711 	.word	0x08004711
 80046d0:	08004711 	.word	0x08004711
 80046d4:	08004711 	.word	0x08004711
 80046d8:	08004711 	.word	0x08004711
 80046dc:	08004709 	.word	0x08004709
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e0bc      	b.n	8004862 <UART_SetConfig+0x5a6>
 80046e8:	2304      	movs	r3, #4
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e0b8      	b.n	8004862 <UART_SetConfig+0x5a6>
 80046f0:	2308      	movs	r3, #8
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e0b4      	b.n	8004862 <UART_SetConfig+0x5a6>
 80046f8:	2310      	movs	r3, #16
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fe:	e0b0      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004700:	2320      	movs	r3, #32
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e0ac      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e0a8      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e0a4      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a8f      	ldr	r2, [pc, #572]	; (800495c <UART_SetConfig+0x6a0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d130      	bne.n	8004784 <UART_SetConfig+0x4c8>
 8004722:	4b8d      	ldr	r3, [pc, #564]	; (8004958 <UART_SetConfig+0x69c>)
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2b05      	cmp	r3, #5
 800472c:	d826      	bhi.n	800477c <UART_SetConfig+0x4c0>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x478>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	0800474d 	.word	0x0800474d
 8004738:	08004755 	.word	0x08004755
 800473c:	0800475d 	.word	0x0800475d
 8004740:	08004765 	.word	0x08004765
 8004744:	0800476d 	.word	0x0800476d
 8004748:	08004775 	.word	0x08004775
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e086      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004754:	2304      	movs	r3, #4
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e082      	b.n	8004862 <UART_SetConfig+0x5a6>
 800475c:	2308      	movs	r3, #8
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e07e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004764:	2310      	movs	r3, #16
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e07a      	b.n	8004862 <UART_SetConfig+0x5a6>
 800476c:	2320      	movs	r3, #32
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e076      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004774:	2340      	movs	r3, #64	; 0x40
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477a:	e072      	b.n	8004862 <UART_SetConfig+0x5a6>
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004782:	e06e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a75      	ldr	r2, [pc, #468]	; (8004960 <UART_SetConfig+0x6a4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d130      	bne.n	80047f0 <UART_SetConfig+0x534>
 800478e:	4b72      	ldr	r3, [pc, #456]	; (8004958 <UART_SetConfig+0x69c>)
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	2b05      	cmp	r3, #5
 8004798:	d826      	bhi.n	80047e8 <UART_SetConfig+0x52c>
 800479a:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x4e4>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047b9 	.word	0x080047b9
 80047a4:	080047c1 	.word	0x080047c1
 80047a8:	080047c9 	.word	0x080047c9
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e050      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047c0:	2304      	movs	r3, #4
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e04c      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047c8:	2308      	movs	r3, #8
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e048      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047d0:	2310      	movs	r3, #16
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e044      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047d8:	2320      	movs	r3, #32
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e040      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047e0:	2340      	movs	r3, #64	; 0x40
 80047e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e6:	e03c      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ee:	e038      	b.n	8004862 <UART_SetConfig+0x5a6>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5b      	ldr	r2, [pc, #364]	; (8004964 <UART_SetConfig+0x6a8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d130      	bne.n	800485c <UART_SetConfig+0x5a0>
 80047fa:	4b57      	ldr	r3, [pc, #348]	; (8004958 <UART_SetConfig+0x69c>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	2b05      	cmp	r3, #5
 8004804:	d826      	bhi.n	8004854 <UART_SetConfig+0x598>
 8004806:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0x550>)
 8004808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480c:	08004825 	.word	0x08004825
 8004810:	0800482d 	.word	0x0800482d
 8004814:	08004835 	.word	0x08004835
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	2302      	movs	r3, #2
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e01a      	b.n	8004862 <UART_SetConfig+0x5a6>
 800482c:	2304      	movs	r3, #4
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e016      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004834:	2308      	movs	r3, #8
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e012      	b.n	8004862 <UART_SetConfig+0x5a6>
 800483c:	2310      	movs	r3, #16
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e00e      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004844:	2320      	movs	r3, #32
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e00a      	b.n	8004862 <UART_SetConfig+0x5a6>
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004852:	e006      	b.n	8004862 <UART_SetConfig+0x5a6>
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485a:	e002      	b.n	8004862 <UART_SetConfig+0x5a6>
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <UART_SetConfig+0x6a8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	f040 80f8 	bne.w	8004a5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800486e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004872:	2b20      	cmp	r3, #32
 8004874:	dc46      	bgt.n	8004904 <UART_SetConfig+0x648>
 8004876:	2b02      	cmp	r3, #2
 8004878:	f2c0 8082 	blt.w	8004980 <UART_SetConfig+0x6c4>
 800487c:	3b02      	subs	r3, #2
 800487e:	2b1e      	cmp	r3, #30
 8004880:	d87e      	bhi.n	8004980 <UART_SetConfig+0x6c4>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x5cc>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	0800490b 	.word	0x0800490b
 800488c:	08004981 	.word	0x08004981
 8004890:	08004913 	.word	0x08004913
 8004894:	08004981 	.word	0x08004981
 8004898:	08004981 	.word	0x08004981
 800489c:	08004981 	.word	0x08004981
 80048a0:	08004923 	.word	0x08004923
 80048a4:	08004981 	.word	0x08004981
 80048a8:	08004981 	.word	0x08004981
 80048ac:	08004981 	.word	0x08004981
 80048b0:	08004981 	.word	0x08004981
 80048b4:	08004981 	.word	0x08004981
 80048b8:	08004981 	.word	0x08004981
 80048bc:	08004981 	.word	0x08004981
 80048c0:	08004933 	.word	0x08004933
 80048c4:	08004981 	.word	0x08004981
 80048c8:	08004981 	.word	0x08004981
 80048cc:	08004981 	.word	0x08004981
 80048d0:	08004981 	.word	0x08004981
 80048d4:	08004981 	.word	0x08004981
 80048d8:	08004981 	.word	0x08004981
 80048dc:	08004981 	.word	0x08004981
 80048e0:	08004981 	.word	0x08004981
 80048e4:	08004981 	.word	0x08004981
 80048e8:	08004981 	.word	0x08004981
 80048ec:	08004981 	.word	0x08004981
 80048f0:	08004981 	.word	0x08004981
 80048f4:	08004981 	.word	0x08004981
 80048f8:	08004981 	.word	0x08004981
 80048fc:	08004981 	.word	0x08004981
 8004900:	08004973 	.word	0x08004973
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	d037      	beq.n	8004978 <UART_SetConfig+0x6bc>
 8004908:	e03a      	b.n	8004980 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800490a:	f7fe ffd7 	bl	80038bc <HAL_RCCEx_GetD3PCLK1Freq>
 800490e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004910:	e03c      	b.n	800498c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe ffe6 	bl	80038e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004920:	e034      	b.n	800498c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004922:	f107 0318 	add.w	r3, r7, #24
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff f932 	bl	8003b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004930:	e02c      	b.n	800498c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <UART_SetConfig+0x69c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <UART_SetConfig+0x69c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	4a07      	ldr	r2, [pc, #28]	; (8004968 <UART_SetConfig+0x6ac>)
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004950:	e01c      	b.n	800498c <UART_SetConfig+0x6d0>
 8004952:	bf00      	nop
 8004954:	40011400 	.word	0x40011400
 8004958:	58024400 	.word	0x58024400
 800495c:	40007800 	.word	0x40007800
 8004960:	40007c00 	.word	0x40007c00
 8004964:	58000c00 	.word	0x58000c00
 8004968:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800496c:	4b9d      	ldr	r3, [pc, #628]	; (8004be4 <UART_SetConfig+0x928>)
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004970:	e00c      	b.n	800498c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004972:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <UART_SetConfig+0x92c>)
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004976:	e009      	b.n	800498c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004978:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800497e:	e005      	b.n	800498c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800498a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800498c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 81de 	beq.w	8004d50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	4a94      	ldr	r2, [pc, #592]	; (8004bec <UART_SetConfig+0x930>)
 800499a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800499e:	461a      	mov	r2, r3
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4413      	add	r3, r2
 80049b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d305      	bcc.n	80049c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d903      	bls.n	80049cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80049ca:	e1c1      	b.n	8004d50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	2200      	movs	r2, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	4a84      	ldr	r2, [pc, #528]	; (8004bec <UART_SetConfig+0x930>)
 80049da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2200      	movs	r2, #0
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ee:	f7fb fccf 	bl	8000390 <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	020b      	lsls	r3, r1, #8
 8004a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a08:	0202      	lsls	r2, r0, #8
 8004a0a:	6979      	ldr	r1, [r7, #20]
 8004a0c:	6849      	ldr	r1, [r1, #4]
 8004a0e:	0849      	lsrs	r1, r1, #1
 8004a10:	2000      	movs	r0, #0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4605      	mov	r5, r0
 8004a16:	eb12 0804 	adds.w	r8, r2, r4
 8004a1a:	eb43 0905 	adc.w	r9, r3, r5
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	469a      	mov	sl, r3
 8004a26:	4693      	mov	fp, r2
 8004a28:	4652      	mov	r2, sl
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fb fcae 	bl	8000390 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4613      	mov	r3, r2
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a42:	d308      	bcc.n	8004a56 <UART_SetConfig+0x79a>
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a4a:	d204      	bcs.n	8004a56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a52:	60da      	str	r2, [r3, #12]
 8004a54:	e17c      	b.n	8004d50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a5c:	e178      	b.n	8004d50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a66:	f040 80c5 	bne.w	8004bf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004a6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a6e:	2b20      	cmp	r3, #32
 8004a70:	dc48      	bgt.n	8004b04 <UART_SetConfig+0x848>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	db7b      	blt.n	8004b6e <UART_SetConfig+0x8b2>
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d879      	bhi.n	8004b6e <UART_SetConfig+0x8b2>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0x7c4>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004b0b 	.word	0x08004b0b
 8004a84:	08004b13 	.word	0x08004b13
 8004a88:	08004b6f 	.word	0x08004b6f
 8004a8c:	08004b6f 	.word	0x08004b6f
 8004a90:	08004b1b 	.word	0x08004b1b
 8004a94:	08004b6f 	.word	0x08004b6f
 8004a98:	08004b6f 	.word	0x08004b6f
 8004a9c:	08004b6f 	.word	0x08004b6f
 8004aa0:	08004b2b 	.word	0x08004b2b
 8004aa4:	08004b6f 	.word	0x08004b6f
 8004aa8:	08004b6f 	.word	0x08004b6f
 8004aac:	08004b6f 	.word	0x08004b6f
 8004ab0:	08004b6f 	.word	0x08004b6f
 8004ab4:	08004b6f 	.word	0x08004b6f
 8004ab8:	08004b6f 	.word	0x08004b6f
 8004abc:	08004b6f 	.word	0x08004b6f
 8004ac0:	08004b3b 	.word	0x08004b3b
 8004ac4:	08004b6f 	.word	0x08004b6f
 8004ac8:	08004b6f 	.word	0x08004b6f
 8004acc:	08004b6f 	.word	0x08004b6f
 8004ad0:	08004b6f 	.word	0x08004b6f
 8004ad4:	08004b6f 	.word	0x08004b6f
 8004ad8:	08004b6f 	.word	0x08004b6f
 8004adc:	08004b6f 	.word	0x08004b6f
 8004ae0:	08004b6f 	.word	0x08004b6f
 8004ae4:	08004b6f 	.word	0x08004b6f
 8004ae8:	08004b6f 	.word	0x08004b6f
 8004aec:	08004b6f 	.word	0x08004b6f
 8004af0:	08004b6f 	.word	0x08004b6f
 8004af4:	08004b6f 	.word	0x08004b6f
 8004af8:	08004b6f 	.word	0x08004b6f
 8004afc:	08004b6f 	.word	0x08004b6f
 8004b00:	08004b61 	.word	0x08004b61
 8004b04:	2b40      	cmp	r3, #64	; 0x40
 8004b06:	d02e      	beq.n	8004b66 <UART_SetConfig+0x8aa>
 8004b08:	e031      	b.n	8004b6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0a:	f7fd fca1 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8004b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b10:	e033      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b12:	f7fd fcb3 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004b16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b18:	e02f      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fee2 	bl	80038e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b28:	e027      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b2a:	f107 0318 	add.w	r3, r7, #24
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff f82e 	bl	8003b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b38:	e01f      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b3a:	4b2d      	ldr	r3, [pc, #180]	; (8004bf0 <UART_SetConfig+0x934>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d009      	beq.n	8004b5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b46:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <UART_SetConfig+0x934>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	08db      	lsrs	r3, r3, #3
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <UART_SetConfig+0x928>)
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b58:	e00f      	b.n	8004b7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b5a:	4b22      	ldr	r3, [pc, #136]	; (8004be4 <UART_SetConfig+0x928>)
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b5e:	e00c      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b60:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <UART_SetConfig+0x92c>)
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80e7 	beq.w	8004d50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	4a19      	ldr	r2, [pc, #100]	; (8004bec <UART_SetConfig+0x930>)
 8004b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b94:	005a      	lsls	r2, r3, #1
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	085b      	lsrs	r3, r3, #1
 8004b9c:	441a      	add	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d916      	bls.n	8004bdc <UART_SetConfig+0x920>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d212      	bcs.n	8004bdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f023 030f 	bic.w	r3, r3, #15
 8004bbe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e0b9      	b.n	8004d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004be2:	e0b5      	b.n	8004d50 <UART_SetConfig+0xa94>
 8004be4:	03d09000 	.word	0x03d09000
 8004be8:	003d0900 	.word	0x003d0900
 8004bec:	08006e98 	.word	0x08006e98
 8004bf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	dc49      	bgt.n	8004c90 <UART_SetConfig+0x9d4>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db7c      	blt.n	8004cfa <UART_SetConfig+0xa3e>
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d87a      	bhi.n	8004cfa <UART_SetConfig+0xa3e>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0x950>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c97 	.word	0x08004c97
 8004c10:	08004c9f 	.word	0x08004c9f
 8004c14:	08004cfb 	.word	0x08004cfb
 8004c18:	08004cfb 	.word	0x08004cfb
 8004c1c:	08004ca7 	.word	0x08004ca7
 8004c20:	08004cfb 	.word	0x08004cfb
 8004c24:	08004cfb 	.word	0x08004cfb
 8004c28:	08004cfb 	.word	0x08004cfb
 8004c2c:	08004cb7 	.word	0x08004cb7
 8004c30:	08004cfb 	.word	0x08004cfb
 8004c34:	08004cfb 	.word	0x08004cfb
 8004c38:	08004cfb 	.word	0x08004cfb
 8004c3c:	08004cfb 	.word	0x08004cfb
 8004c40:	08004cfb 	.word	0x08004cfb
 8004c44:	08004cfb 	.word	0x08004cfb
 8004c48:	08004cfb 	.word	0x08004cfb
 8004c4c:	08004cc7 	.word	0x08004cc7
 8004c50:	08004cfb 	.word	0x08004cfb
 8004c54:	08004cfb 	.word	0x08004cfb
 8004c58:	08004cfb 	.word	0x08004cfb
 8004c5c:	08004cfb 	.word	0x08004cfb
 8004c60:	08004cfb 	.word	0x08004cfb
 8004c64:	08004cfb 	.word	0x08004cfb
 8004c68:	08004cfb 	.word	0x08004cfb
 8004c6c:	08004cfb 	.word	0x08004cfb
 8004c70:	08004cfb 	.word	0x08004cfb
 8004c74:	08004cfb 	.word	0x08004cfb
 8004c78:	08004cfb 	.word	0x08004cfb
 8004c7c:	08004cfb 	.word	0x08004cfb
 8004c80:	08004cfb 	.word	0x08004cfb
 8004c84:	08004cfb 	.word	0x08004cfb
 8004c88:	08004cfb 	.word	0x08004cfb
 8004c8c:	08004ced 	.word	0x08004ced
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d02e      	beq.n	8004cf2 <UART_SetConfig+0xa36>
 8004c94:	e031      	b.n	8004cfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c96:	f7fd fbdb 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8004c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004c9c:	e033      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c9e:	f7fd fbed 	bl	800247c <HAL_RCC_GetPCLK2Freq>
 8004ca2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ca4:	e02f      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fe fe1c 	bl	80038e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb4:	e027      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe ff68 	bl	8003b90 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cc4:	e01f      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <UART_SetConfig+0xac0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <UART_SetConfig+0xac0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	08db      	lsrs	r3, r3, #3
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	4a28      	ldr	r2, [pc, #160]	; (8004d80 <UART_SetConfig+0xac4>)
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ce4:	e00f      	b.n	8004d06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004ce6:	4b26      	ldr	r3, [pc, #152]	; (8004d80 <UART_SetConfig+0xac4>)
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cea:	e00c      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <UART_SetConfig+0xac8>)
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cf0:	e009      	b.n	8004d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cf8:	e005      	b.n	8004d06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004d04:	bf00      	nop
    }

    if (pclk != 0U)
 8004d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d021      	beq.n	8004d50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <UART_SetConfig+0xacc>)
 8004d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	441a      	add	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	2b0f      	cmp	r3, #15
 8004d34:	d909      	bls.n	8004d4a <UART_SetConfig+0xa8e>
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d205      	bcs.n	8004d4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
 8004d48:	e002      	b.n	8004d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d6c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3748      	adds	r7, #72	; 0x48
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	03d09000 	.word	0x03d09000
 8004d84:	003d0900 	.word	0x003d0900
 8004d88:	08006e98 	.word	0x08006e98

08004d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8a:	d10a      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b098      	sub	sp, #96	; 0x60
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee0:	f7fb fc5a 	bl	8000798 <HAL_GetTick>
 8004ee4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0308 	and.w	r3, r3, #8
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d12f      	bne.n	8004f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f88e 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d022      	beq.n	8004f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	653b      	str	r3, [r7, #80]	; 0x50
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e063      	b.n	800501c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0304 	and.w	r3, r3, #4
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d149      	bne.n	8004ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f857 	bl	8005024 <UART_WaitOnFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d03c      	beq.n	8004ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	623b      	str	r3, [r7, #32]
   return(result);
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f023 0301 	bic.w	r3, r3, #1
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fce:	61fa      	str	r2, [r7, #28]
 8004fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	69b9      	ldr	r1, [r7, #24]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	617b      	str	r3, [r7, #20]
   return(result);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e5      	bne.n	8004fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e012      	b.n	800501c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2220      	movs	r2, #32
 8004ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3758      	adds	r7, #88	; 0x58
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	e04f      	b.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d04b      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fb fbab 	bl	8000798 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <UART_WaitOnFlagUntilTimeout+0x30>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e04e      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b00      	cmp	r3, #0
 8005064:	d037      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b80      	cmp	r3, #128	; 0x80
 800506a:	d034      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d031      	beq.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b08      	cmp	r3, #8
 800507e:	d110      	bne.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f839 	bl	8005100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2208      	movs	r2, #8
 8005092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e029      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	d111      	bne.n	80050d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f81f 	bl	8005100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e00f      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4013      	ands	r3, r2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bf0c      	ite	eq
 80050e6:	2301      	moveq	r3, #1
 80050e8:	2300      	movne	r3, #0
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d0a0      	beq.n	8005036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b095      	sub	sp, #84	; 0x54
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800511c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005126:	643b      	str	r3, [r7, #64]	; 0x40
 8005128:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800512c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e6      	bne.n	8005108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3308      	adds	r3, #8
 8005140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	61fb      	str	r3, [r7, #28]
   return(result);
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	4b1e      	ldr	r3, [pc, #120]	; (80051c8 <UART_EndRxTransfer+0xc8>)
 800514e:	4013      	ands	r3, r2
 8005150:	64bb      	str	r3, [r7, #72]	; 0x48
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3308      	adds	r3, #8
 8005158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800515a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e5      	bne.n	800513a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d118      	bne.n	80051a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60bb      	str	r3, [r7, #8]
   return(result);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005194:	61bb      	str	r3, [r7, #24]
 8005196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6979      	ldr	r1, [r7, #20]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	613b      	str	r3, [r7, #16]
   return(result);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	675a      	str	r2, [r3, #116]	; 0x74
}
 80051bc:	bf00      	nop
 80051be:	3754      	adds	r7, #84	; 0x54
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	effffffe 	.word	0xeffffffe

080051cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d101      	bne.n	80051e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80051de:	2302      	movs	r3, #2
 80051e0:	e027      	b.n	8005232 <HAL_UARTEx_DisableFifoMode+0x66>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2224      	movs	r2, #36	; 0x24
 80051ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0201 	bic.w	r2, r2, #1
 8005208:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005252:	2302      	movs	r3, #2
 8005254:	e02d      	b.n	80052b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	; 0x24
 8005262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f850 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b084      	sub	sp, #16
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e02d      	b.n	800532e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2224      	movs	r2, #36	; 0x24
 80052de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f812 	bl	8005338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
	...

08005338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005344:	2b00      	cmp	r3, #0
 8005346:	d108      	bne.n	800535a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005358:	e031      	b.n	80053be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535a:	2310      	movs	r3, #16
 800535c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800535e:	2310      	movs	r3, #16
 8005360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	0e5b      	lsrs	r3, r3, #25
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	0f5b      	lsrs	r3, r3, #29
 800537a:	b2db      	uxtb	r3, r3
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005382:	7bbb      	ldrb	r3, [r7, #14]
 8005384:	7b3a      	ldrb	r2, [r7, #12]
 8005386:	4911      	ldr	r1, [pc, #68]	; (80053cc <UARTEx_SetNbDataToProcess+0x94>)
 8005388:	5c8a      	ldrb	r2, [r1, r2]
 800538a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800538e:	7b3a      	ldrb	r2, [r7, #12]
 8005390:	490f      	ldr	r1, [pc, #60]	; (80053d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005394:	fb93 f3f2 	sdiv	r3, r3, r2
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
 80053a2:	7b7a      	ldrb	r2, [r7, #13]
 80053a4:	4909      	ldr	r1, [pc, #36]	; (80053cc <UARTEx_SetNbDataToProcess+0x94>)
 80053a6:	5c8a      	ldrb	r2, [r1, r2]
 80053a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ac:	7b7a      	ldrb	r2, [r7, #13]
 80053ae:	4908      	ldr	r1, [pc, #32]	; (80053d0 <UARTEx_SetNbDataToProcess+0x98>)
 80053b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	08006eb0 	.word	0x08006eb0
 80053d0:	08006eb8 	.word	0x08006eb8

080053d4 <UART_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UART_Print(UART_HandleTypeDef *huart, const char *message) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
      HAL_UART_Transmit(huart, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80053de:	6838      	ldr	r0, [r7, #0]
 80053e0:	f7fa ff7e 	bl	80002e0 <strlen>
 80053e4:	4603      	mov	r3, r0
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fe fed6 	bl	80041a0 <HAL_UART_Transmit>
}
 80053f4:	bf00      	nop
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <scanI2C>:

void scanI2C(){
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < 128; i++) {
 8005402:	2300      	movs	r3, #0
 8005404:	71fb      	strb	r3, [r7, #7]
 8005406:	e02d      	b.n	8005464 <scanI2C+0x68>
    if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	b29b      	uxth	r3, r3
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	b299      	uxth	r1, r3
 8005410:	2305      	movs	r3, #5
 8005412:	2203      	movs	r2, #3
 8005414:	4818      	ldr	r0, [pc, #96]	; (8005478 <scanI2C+0x7c>)
 8005416:	f7fb fd45 	bl	8000ea4 <HAL_I2C_IsDeviceReady>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d112      	bne.n	8005446 <scanI2C+0x4a>
      UART_Print(&huart3, "I2C device found at address: 0x");
 8005420:	4916      	ldr	r1, [pc, #88]	; (800547c <scanI2C+0x80>)
 8005422:	4817      	ldr	r0, [pc, #92]	; (8005480 <scanI2C+0x84>)
 8005424:	f7ff ffd6 	bl	80053d4 <UART_Print>
      char str[3];
      sprintf(str, "%02X", i);
 8005428:	79fa      	ldrb	r2, [r7, #7]
 800542a:	1d3b      	adds	r3, r7, #4
 800542c:	4915      	ldr	r1, [pc, #84]	; (8005484 <scanI2C+0x88>)
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd90 	bl	8005f54 <siprintf>
      UART_Print(&huart3, str);
 8005434:	1d3b      	adds	r3, r7, #4
 8005436:	4619      	mov	r1, r3
 8005438:	4811      	ldr	r0, [pc, #68]	; (8005480 <scanI2C+0x84>)
 800543a:	f7ff ffcb 	bl	80053d4 <UART_Print>
      UART_Print(&huart3, "\r\n");
 800543e:	4912      	ldr	r1, [pc, #72]	; (8005488 <scanI2C+0x8c>)
 8005440:	480f      	ldr	r0, [pc, #60]	; (8005480 <scanI2C+0x84>)
 8005442:	f7ff ffc7 	bl	80053d4 <UART_Print>
    } 
    if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d008      	beq.n	800545e <scanI2C+0x62>
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	3301      	adds	r3, #1
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <scanI2C+0x62>
 8005458:	200a      	movs	r0, #10
 800545a:	f000 fd73 	bl	8005f44 <putchar>
  for (uint8_t i = 0; i < 128; i++) {
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	3301      	adds	r3, #1
 8005462:	71fb      	strb	r3, [r7, #7]
 8005464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dacd      	bge.n	8005408 <scanI2C+0xc>
  }
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	2400008c 	.word	0x2400008c
 800547c:	08006dc4 	.word	0x08006dc4
 8005480:	240000e0 	.word	0x240000e0
 8005484:	08006de4 	.word	0x08006de4
 8005488:	08006dec 	.word	0x08006dec

0800548c <checkI2CAddress>:

int checkI2CAddress(uint8_t address) {
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(address<<1), 3, 5) == HAL_OK) {
 8005496:	79fb      	ldrb	r3, [r7, #7]
 8005498:	b29b      	uxth	r3, r3
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	b299      	uxth	r1, r3
 800549e:	2305      	movs	r3, #5
 80054a0:	2203      	movs	r2, #3
 80054a2:	481b      	ldr	r0, [pc, #108]	; (8005510 <checkI2CAddress+0x84>)
 80054a4:	f7fb fcfe 	bl	8000ea4 <HAL_I2C_IsDeviceReady>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d116      	bne.n	80054dc <checkI2CAddress+0x50>
    UART_Print(&huart3, "I2C device found at address: 0x");
 80054ae:	4919      	ldr	r1, [pc, #100]	; (8005514 <checkI2CAddress+0x88>)
 80054b0:	4819      	ldr	r0, [pc, #100]	; (8005518 <checkI2CAddress+0x8c>)
 80054b2:	f7ff ff8f 	bl	80053d4 <UART_Print>
    char str[3];
    sprintf(str, "%02X", address);
 80054b6:	79fa      	ldrb	r2, [r7, #7]
 80054b8:	f107 030c 	add.w	r3, r7, #12
 80054bc:	4917      	ldr	r1, [pc, #92]	; (800551c <checkI2CAddress+0x90>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fd48 	bl	8005f54 <siprintf>
    UART_Print(&huart3, str);
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	4619      	mov	r1, r3
 80054ca:	4813      	ldr	r0, [pc, #76]	; (8005518 <checkI2CAddress+0x8c>)
 80054cc:	f7ff ff82 	bl	80053d4 <UART_Print>
    UART_Print(&huart3, "\r\n");
 80054d0:	4913      	ldr	r1, [pc, #76]	; (8005520 <checkI2CAddress+0x94>)
 80054d2:	4811      	ldr	r0, [pc, #68]	; (8005518 <checkI2CAddress+0x8c>)
 80054d4:	f7ff ff7e 	bl	80053d4 <UART_Print>
    return 1;
 80054d8:	2301      	movs	r3, #1
 80054da:	e015      	b.n	8005508 <checkI2CAddress+0x7c>
  } else {
    UART_Print(&huart3, "I2C device not found at address: 0x");
 80054dc:	4911      	ldr	r1, [pc, #68]	; (8005524 <checkI2CAddress+0x98>)
 80054de:	480e      	ldr	r0, [pc, #56]	; (8005518 <checkI2CAddress+0x8c>)
 80054e0:	f7ff ff78 	bl	80053d4 <UART_Print>
    char str[3];
    sprintf(str, "%02X", address);
 80054e4:	79fa      	ldrb	r2, [r7, #7]
 80054e6:	f107 0308 	add.w	r3, r7, #8
 80054ea:	490c      	ldr	r1, [pc, #48]	; (800551c <checkI2CAddress+0x90>)
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fd31 	bl	8005f54 <siprintf>
    UART_Print(&huart3, str);
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4619      	mov	r1, r3
 80054f8:	4807      	ldr	r0, [pc, #28]	; (8005518 <checkI2CAddress+0x8c>)
 80054fa:	f7ff ff6b 	bl	80053d4 <UART_Print>
    UART_Print(&huart3, "\r\n");
 80054fe:	4908      	ldr	r1, [pc, #32]	; (8005520 <checkI2CAddress+0x94>)
 8005500:	4805      	ldr	r0, [pc, #20]	; (8005518 <checkI2CAddress+0x8c>)
 8005502:	f7ff ff67 	bl	80053d4 <UART_Print>
    return 0;
 8005506:	2300      	movs	r3, #0
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	2400008c 	.word	0x2400008c
 8005514:	08006dc4 	.word	0x08006dc4
 8005518:	240000e0 	.word	0x240000e0
 800551c:	08006de4 	.word	0x08006de4
 8005520:	08006dec 	.word	0x08006dec
 8005524:	08006df0 	.word	0x08006df0

08005528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800552c:	f7fb f8ae 	bl	800068c <HAL_Init>
  

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005530:	f000 f870 	bl	8005614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005534:	f000 f966 	bl	8005804 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8005538:	f000 f918 	bl	800576c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800553c:	f000 f8d6 	bl	80056ec <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Scan I2C bus for devicess
  scanI2C();
 8005540:	f7ff ff5c 	bl	80053fc <scanI2C>
  // Check if device is MPU6050
  if (checkI2CAddress(0x68)) {
 8005544:	2068      	movs	r0, #104	; 0x68
 8005546:	f7ff ffa1 	bl	800548c <checkI2CAddress>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <main+0x32>
  UART_Print(&huart3, "Device MPU6050 found at address 0x68\r\n");
 8005550:	4929      	ldr	r1, [pc, #164]	; (80055f8 <main+0xd0>)
 8005552:	482a      	ldr	r0, [pc, #168]	; (80055fc <main+0xd4>)
 8005554:	f7ff ff3e 	bl	80053d4 <UART_Print>
 8005558:	e003      	b.n	8005562 <main+0x3a>
  } else {
  UART_Print(&huart3, "Device MPU6050 not found at address 0x68\r\n");
 800555a:	4929      	ldr	r1, [pc, #164]	; (8005600 <main+0xd8>)
 800555c:	4827      	ldr	r0, [pc, #156]	; (80055fc <main+0xd4>)
 800555e:	f7ff ff39 	bl	80053d4 <UART_Print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8005562:	2201      	movs	r2, #1
 8005564:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005568:	4826      	ldr	r0, [pc, #152]	; (8005604 <main+0xdc>)
 800556a:	f7fb fbe5 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 800556e:	2200      	movs	r2, #0
 8005570:	2102      	movs	r1, #2
 8005572:	4825      	ldr	r0, [pc, #148]	; (8005608 <main+0xe0>)
 8005574:	f7fb fbe0 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8005578:	2200      	movs	r2, #0
 800557a:	2101      	movs	r1, #1
 800557c:	4821      	ldr	r0, [pc, #132]	; (8005604 <main+0xdc>)
 800557e:	f7fb fbdb 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8005582:	200a      	movs	r0, #10
 8005584:	f7fb f914 	bl	80007b0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 8005588:	2200      	movs	r2, #0
 800558a:	2102      	movs	r1, #2
 800558c:	481e      	ldr	r0, [pc, #120]	; (8005608 <main+0xe0>)
 800558e:	f7fb fbd3 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8005592:	2201      	movs	r2, #1
 8005594:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005598:	481a      	ldr	r0, [pc, #104]	; (8005604 <main+0xdc>)
 800559a:	f7fb fbcd 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800559e:	2200      	movs	r2, #0
 80055a0:	2101      	movs	r1, #1
 80055a2:	4818      	ldr	r0, [pc, #96]	; (8005604 <main+0xdc>)
 80055a4:	f7fb fbc8 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80055a8:	200a      	movs	r0, #10
 80055aa:	f7fb f901 	bl	80007b0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, 0);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2102      	movs	r1, #2
 80055b2:	4815      	ldr	r0, [pc, #84]	; (8005608 <main+0xe0>)
 80055b4:	f7fb fbc0 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055be:	4811      	ldr	r0, [pc, #68]	; (8005604 <main+0xdc>)
 80055c0:	f7fb fbba 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 80055c4:	2201      	movs	r2, #1
 80055c6:	2101      	movs	r1, #1
 80055c8:	480e      	ldr	r0, [pc, #56]	; (8005604 <main+0xdc>)
 80055ca:	f7fb fbb5 	bl	8000d38 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80055ce:	200a      	movs	r0, #10
 80055d0:	f7fb f8ee 	bl	80007b0 <HAL_Delay>
	UART_Print(&huart3, "Hello, UART!\r\n");
 80055d4:	490d      	ldr	r1, [pc, #52]	; (800560c <main+0xe4>)
 80055d6:	4809      	ldr	r0, [pc, #36]	; (80055fc <main+0xd4>)
 80055d8:	f7ff fefc 	bl	80053d4 <UART_Print>
	HAL_Delay(10);
 80055dc:	200a      	movs	r0, #10
 80055de:	f7fb f8e7 	bl	80007b0 <HAL_Delay>
  if (checkI2CAddress(0x36)) { //AS5600
 80055e2:	2036      	movs	r0, #54	; 0x36
 80055e4:	f7ff ff52 	bl	800548c <checkI2CAddress>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0b9      	beq.n	8005562 <main+0x3a>
  UART_Print(&huart3, "Device found at address 0x36\r\n");
 80055ee:	4908      	ldr	r1, [pc, #32]	; (8005610 <main+0xe8>)
 80055f0:	4802      	ldr	r0, [pc, #8]	; (80055fc <main+0xd4>)
 80055f2:	f7ff feef 	bl	80053d4 <UART_Print>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80055f6:	e7b4      	b.n	8005562 <main+0x3a>
 80055f8:	08006e14 	.word	0x08006e14
 80055fc:	240000e0 	.word	0x240000e0
 8005600:	08006e3c 	.word	0x08006e3c
 8005604:	58020400 	.word	0x58020400
 8005608:	58021000 	.word	0x58021000
 800560c:	08006e68 	.word	0x08006e68
 8005610:	08006e78 	.word	0x08006e78

08005614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b09c      	sub	sp, #112	; 0x70
 8005618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800561a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800561e:	224c      	movs	r2, #76	; 0x4c
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fcf9 	bl	800601a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	2220      	movs	r2, #32
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fcf3 	bl	800601a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005634:	2002      	movs	r0, #2
 8005636:	f7fb ff17 	bl	8001468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800563a:	2300      	movs	r3, #0
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <SystemClock_Config+0xd0>)
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	4a28      	ldr	r2, [pc, #160]	; (80056e4 <SystemClock_Config+0xd0>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	62d3      	str	r3, [r2, #44]	; 0x2c
 800564a:	4b26      	ldr	r3, [pc, #152]	; (80056e4 <SystemClock_Config+0xd0>)
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <SystemClock_Config+0xd4>)
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800565c:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <SystemClock_Config+0xd4>)
 800565e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005662:	6193      	str	r3, [r2, #24]
 8005664:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <SystemClock_Config+0xd4>)
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800566c:	603b      	str	r3, [r7, #0]
 800566e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005670:	bf00      	nop
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <SystemClock_Config+0xd4>)
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567e:	d1f8      	bne.n	8005672 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005680:	2302      	movs	r3, #2
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8005684:	2301      	movs	r3, #1
 8005686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800568c:	2300      	movs	r3, #0
 800568e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005694:	4618      	mov	r0, r3
 8005696:	f7fb ff21 	bl	80014dc <HAL_RCC_OscConfig>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80056a0:	f000 f91a 	bl	80058d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056a4:	233f      	movs	r3, #63	; 0x3f
 80056a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80056b0:	2300      	movs	r3, #0
 80056b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80056b8:	2340      	movs	r3, #64	; 0x40
 80056ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80056bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80056c2:	2300      	movs	r3, #0
 80056c4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80056c6:	1d3b      	adds	r3, r7, #4
 80056c8:	2101      	movs	r1, #1
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fc fb60 	bl	8001d90 <HAL_RCC_ClockConfig>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80056d6:	f000 f8ff 	bl	80058d8 <Error_Handler>
  }
}
 80056da:	bf00      	nop
 80056dc:	3770      	adds	r7, #112	; 0x70
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58000400 	.word	0x58000400
 80056e8:	58024800 	.word	0x58024800

080056ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <MX_I2C1_Init+0x74>)
 80056f2:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <MX_I2C1_Init+0x78>)
 80056f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80056f6:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <MX_I2C1_Init+0x74>)
 80056f8:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <MX_I2C1_Init+0x7c>)
 80056fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80056fc:	4b18      	ldr	r3, [pc, #96]	; (8005760 <MX_I2C1_Init+0x74>)
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <MX_I2C1_Init+0x74>)
 8005704:	2201      	movs	r2, #1
 8005706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005708:	4b15      	ldr	r3, [pc, #84]	; (8005760 <MX_I2C1_Init+0x74>)
 800570a:	2200      	movs	r2, #0
 800570c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <MX_I2C1_Init+0x74>)
 8005710:	2200      	movs	r2, #0
 8005712:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005714:	4b12      	ldr	r3, [pc, #72]	; (8005760 <MX_I2C1_Init+0x74>)
 8005716:	2200      	movs	r2, #0
 8005718:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800571a:	4b11      	ldr	r3, [pc, #68]	; (8005760 <MX_I2C1_Init+0x74>)
 800571c:	2200      	movs	r2, #0
 800571e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005720:	4b0f      	ldr	r3, [pc, #60]	; (8005760 <MX_I2C1_Init+0x74>)
 8005722:	2200      	movs	r2, #0
 8005724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005726:	480e      	ldr	r0, [pc, #56]	; (8005760 <MX_I2C1_Init+0x74>)
 8005728:	f7fb fb20 	bl	8000d6c <HAL_I2C_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005732:	f000 f8d1 	bl	80058d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005736:	2100      	movs	r1, #0
 8005738:	4809      	ldr	r0, [pc, #36]	; (8005760 <MX_I2C1_Init+0x74>)
 800573a:	f7fb fdfd 	bl	8001338 <HAL_I2CEx_ConfigAnalogFilter>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005744:	f000 f8c8 	bl	80058d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005748:	2100      	movs	r1, #0
 800574a:	4805      	ldr	r0, [pc, #20]	; (8005760 <MX_I2C1_Init+0x74>)
 800574c:	f7fb fe3f 	bl	80013ce <HAL_I2CEx_ConfigDigitalFilter>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005756:	f000 f8bf 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	2400008c 	.word	0x2400008c
 8005764:	40005400 	.word	0x40005400
 8005768:	00707cbb 	.word	0x00707cbb

0800576c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005770:	4b22      	ldr	r3, [pc, #136]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005772:	4a23      	ldr	r2, [pc, #140]	; (8005800 <MX_USART3_UART_Init+0x94>)
 8005774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005776:	4b21      	ldr	r3, [pc, #132]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b1f      	ldr	r3, [pc, #124]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800578a:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <MX_USART3_UART_Init+0x90>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <MX_USART3_UART_Init+0x90>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b17      	ldr	r3, [pc, #92]	; (80057fc <MX_USART3_UART_Init+0x90>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80057b4:	4811      	ldr	r0, [pc, #68]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057b6:	f7fe fca3 	bl	8004100 <HAL_UART_Init>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80057c0:	f000 f88a 	bl	80058d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057c4:	2100      	movs	r1, #0
 80057c6:	480d      	ldr	r0, [pc, #52]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057c8:	f7ff fd39 	bl	800523e <HAL_UARTEx_SetTxFifoThreshold>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80057d2:	f000 f881 	bl	80058d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80057d6:	2100      	movs	r1, #0
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057da:	f7ff fd6e 	bl	80052ba <HAL_UARTEx_SetRxFifoThreshold>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80057e4:	f000 f878 	bl	80058d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80057e8:	4804      	ldr	r0, [pc, #16]	; (80057fc <MX_USART3_UART_Init+0x90>)
 80057ea:	f7ff fcef 	bl	80051cc <HAL_UARTEx_DisableFifoMode>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80057f4:	f000 f870 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80057f8:	bf00      	nop
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	240000e0 	.word	0x240000e0
 8005800:	40004800 	.word	0x40004800

08005804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580a:	f107 030c 	add.w	r3, r7, #12
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	60da      	str	r2, [r3, #12]
 8005818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800581a:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <MX_GPIO_Init+0xc8>)
 800581c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005820:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <MX_GPIO_Init+0xc8>)
 8005822:	f043 0302 	orr.w	r3, r3, #2
 8005826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800582a:	4b28      	ldr	r3, [pc, #160]	; (80058cc <MX_GPIO_Init+0xc8>)
 800582c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005838:	4b24      	ldr	r3, [pc, #144]	; (80058cc <MX_GPIO_Init+0xc8>)
 800583a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800583e:	4a23      	ldr	r2, [pc, #140]	; (80058cc <MX_GPIO_Init+0xc8>)
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005848:	4b20      	ldr	r3, [pc, #128]	; (80058cc <MX_GPIO_Init+0xc8>)
 800584a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005856:	4b1d      	ldr	r3, [pc, #116]	; (80058cc <MX_GPIO_Init+0xc8>)
 8005858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800585c:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <MX_GPIO_Init+0xc8>)
 800585e:	f043 0310 	orr.w	r3, r3, #16
 8005862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005866:	4b19      	ldr	r3, [pc, #100]	; (80058cc <MX_GPIO_Init+0xc8>)
 8005868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800586c:	f003 0310 	and.w	r3, r3, #16
 8005870:	603b      	str	r3, [r7, #0]
 8005872:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_led_Pin|red_led_Pin, GPIO_PIN_RESET);
 8005874:	2200      	movs	r2, #0
 8005876:	f244 0101 	movw	r1, #16385	; 0x4001
 800587a:	4815      	ldr	r0, [pc, #84]	; (80058d0 <MX_GPIO_Init+0xcc>)
 800587c:	f7fb fa5c 	bl	8000d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(yellow_led_GPIO_Port, yellow_led_Pin, GPIO_PIN_RESET);
 8005880:	2200      	movs	r2, #0
 8005882:	2102      	movs	r1, #2
 8005884:	4813      	ldr	r0, [pc, #76]	; (80058d4 <MX_GPIO_Init+0xd0>)
 8005886:	f7fb fa57 	bl	8000d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_led_Pin red_led_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|red_led_Pin;
 800588a:	f244 0301 	movw	r3, #16385	; 0x4001
 800588e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005890:	2301      	movs	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800589c:	f107 030c 	add.w	r3, r7, #12
 80058a0:	4619      	mov	r1, r3
 80058a2:	480b      	ldr	r0, [pc, #44]	; (80058d0 <MX_GPIO_Init+0xcc>)
 80058a4:	f7fb f898 	bl	80009d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : yellow_led_Pin */
  GPIO_InitStruct.Pin = yellow_led_Pin;
 80058a8:	2302      	movs	r3, #2
 80058aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058ac:	2301      	movs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(yellow_led_GPIO_Port, &GPIO_InitStruct);
 80058b8:	f107 030c 	add.w	r3, r7, #12
 80058bc:	4619      	mov	r1, r3
 80058be:	4805      	ldr	r0, [pc, #20]	; (80058d4 <MX_GPIO_Init+0xd0>)
 80058c0:	f7fb f88a 	bl	80009d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80058c4:	bf00      	nop
 80058c6:	3720      	adds	r7, #32
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	58024400 	.word	0x58024400
 80058d0:	58020400 	.word	0x58020400
 80058d4:	58021000 	.word	0x58021000

080058d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80058dc:	b672      	cpsid	i
}
 80058de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058e0:	e7fe      	b.n	80058e0 <Error_Handler+0x8>
	...

080058e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_MspInit+0x30>)
 80058ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f0:	4a08      	ldr	r2, [pc, #32]	; (8005914 <HAL_MspInit+0x30>)
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <HAL_MspInit+0x30>)
 80058fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	58024400 	.word	0x58024400

08005918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b0ba      	sub	sp, #232	; 0xe8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005930:	f107 0310 	add.w	r3, r7, #16
 8005934:	22c0      	movs	r2, #192	; 0xc0
 8005936:	2100      	movs	r1, #0
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fb6e 	bl	800601a <memset>
  if(hi2c->Instance==I2C1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <HAL_I2C_MspInit+0xc8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d146      	bne.n	80059d6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005948:	f04f 0208 	mov.w	r2, #8
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800595a:	f107 0310 	add.w	r3, r7, #16
 800595e:	4618      	mov	r0, r3
 8005960:	f7fc fda2 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800596a:	f7ff ffb5 	bl	80058d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 8005970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 8005976:	f043 0302 	orr.w	r3, r3, #2
 800597a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 8005980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800598c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005994:	2312      	movs	r3, #18
 8005996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059a6:	2304      	movs	r3, #4
 80059a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80059b0:	4619      	mov	r1, r3
 80059b2:	480d      	ldr	r0, [pc, #52]	; (80059e8 <HAL_I2C_MspInit+0xd0>)
 80059b4:	f7fb f810 	bl	80009d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 80059ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 80059c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_I2C_MspInit+0xcc>)
 80059ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d2:	60bb      	str	r3, [r7, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80059d6:	bf00      	nop
 80059d8:	37e8      	adds	r7, #232	; 0xe8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40005400 	.word	0x40005400
 80059e4:	58024400 	.word	0x58024400
 80059e8:	58020400 	.word	0x58020400

080059ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b0ba      	sub	sp, #232	; 0xe8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80059f8:	2200      	movs	r2, #0
 80059fa:	601a      	str	r2, [r3, #0]
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	609a      	str	r2, [r3, #8]
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a04:	f107 0310 	add.w	r3, r7, #16
 8005a08:	22c0      	movs	r2, #192	; 0xc0
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 fb04 	bl	800601a <memset>
  if(huart->Instance==USART3)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_UART_MspInit+0xc8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d146      	bne.n	8005aaa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005a1c:	f04f 0202 	mov.w	r2, #2
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a2e:	f107 0310 	add.w	r3, r7, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fc fd38 	bl	80024a8 <HAL_RCCEx_PeriphCLKConfig>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005a3e:	f7ff ff4b 	bl	80058d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005a42:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a52:	4b19      	ldr	r3, [pc, #100]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a68:	f043 0308 	orr.w	r3, r3, #8
 8005a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <HAL_UART_MspInit+0xcc>)
 8005a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	2302      	movs	r3, #2
 8005a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a92:	2303      	movs	r3, #3
 8005a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a98:	2307      	movs	r3, #7
 8005a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4805      	ldr	r0, [pc, #20]	; (8005abc <HAL_UART_MspInit+0xd0>)
 8005aa6:	f7fa ff97 	bl	80009d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005aaa:	bf00      	nop
 8005aac:	37e8      	adds	r7, #232	; 0xe8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	58020c00 	.word	0x58020c00

08005ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005ac4:	e7fe      	b.n	8005ac4 <NMI_Handler+0x4>

08005ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aca:	e7fe      	b.n	8005aca <HardFault_Handler+0x4>

08005acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ad0:	e7fe      	b.n	8005ad0 <MemManage_Handler+0x4>

08005ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ad6:	e7fe      	b.n	8005ad6 <BusFault_Handler+0x4>

08005ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005adc:	e7fe      	b.n	8005adc <UsageFault_Handler+0x4>

08005ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005af0:	bf00      	nop
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005afa:	b480      	push	{r7}
 8005afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b0c:	f7fa fe30 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b10:	bf00      	nop
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	e00a      	b.n	8005b3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b26:	f3af 8000 	nop.w
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	60ba      	str	r2, [r7, #8]
 8005b32:	b2ca      	uxtb	r2, r1
 8005b34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	dbf0      	blt.n	8005b26 <_read+0x12>
  }

  return len;
 8005b44:	687b      	ldr	r3, [r7, #4]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e009      	b.n	8005b74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	60ba      	str	r2, [r7, #8]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	3301      	adds	r3, #1
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	dbf1      	blt.n	8005b60 <_write+0x12>
  }
  return len;
 8005b7c:	687b      	ldr	r3, [r7, #4]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <_close>:

int _close(int file)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bae:	605a      	str	r2, [r3, #4]
  return 0;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <_isatty>:

int _isatty(int file)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005bc6:	2301      	movs	r3, #1
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bf8:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <_sbrk+0x5c>)
 8005bfa:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <_sbrk+0x60>)
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c04:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <_sbrk+0x64>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d102      	bne.n	8005c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c0c:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <_sbrk+0x64>)
 8005c0e:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <_sbrk+0x68>)
 8005c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <_sbrk+0x64>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d207      	bcs.n	8005c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c20:	f000 fa4a 	bl	80060b8 <__errno>
 8005c24:	4603      	mov	r3, r0
 8005c26:	220c      	movs	r2, #12
 8005c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2e:	e009      	b.n	8005c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c30:	4b08      	ldr	r3, [pc, #32]	; (8005c54 <_sbrk+0x64>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c36:	4b07      	ldr	r3, [pc, #28]	; (8005c54 <_sbrk+0x64>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	4a05      	ldr	r2, [pc, #20]	; (8005c54 <_sbrk+0x64>)
 8005c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c42:	68fb      	ldr	r3, [r7, #12]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	24080000 	.word	0x24080000
 8005c50:	00000400 	.word	0x00000400
 8005c54:	24000174 	.word	0x24000174
 8005c58:	240002c8 	.word	0x240002c8

08005c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <SystemInit+0xe4>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	4a36      	ldr	r2, [pc, #216]	; (8005d40 <SystemInit+0xe4>)
 8005c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005c70:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <SystemInit+0xe8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	d807      	bhi.n	8005c8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005c7c:	4b31      	ldr	r3, [pc, #196]	; (8005d44 <SystemInit+0xe8>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 030f 	bic.w	r3, r3, #15
 8005c84:	4a2f      	ldr	r2, [pc, #188]	; (8005d44 <SystemInit+0xe8>)
 8005c86:	f043 0307 	orr.w	r3, r3, #7
 8005c8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005c8c:	4b2e      	ldr	r3, [pc, #184]	; (8005d48 <SystemInit+0xec>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2d      	ldr	r2, [pc, #180]	; (8005d48 <SystemInit+0xec>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c98:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <SystemInit+0xec>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005c9e:	4b2a      	ldr	r3, [pc, #168]	; (8005d48 <SystemInit+0xec>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4929      	ldr	r1, [pc, #164]	; (8005d48 <SystemInit+0xec>)
 8005ca4:	4b29      	ldr	r3, [pc, #164]	; (8005d4c <SystemInit+0xf0>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005caa:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <SystemInit+0xe8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <SystemInit+0xe8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 030f 	bic.w	r3, r3, #15
 8005cbe:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <SystemInit+0xe8>)
 8005cc0:	f043 0307 	orr.w	r3, r3, #7
 8005cc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005cc6:	4b20      	ldr	r3, [pc, #128]	; (8005d48 <SystemInit+0xec>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005ccc:	4b1e      	ldr	r3, [pc, #120]	; (8005d48 <SystemInit+0xec>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <SystemInit+0xec>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <SystemInit+0xec>)
 8005cda:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <SystemInit+0xf4>)
 8005cdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005cde:	4b1a      	ldr	r3, [pc, #104]	; (8005d48 <SystemInit+0xec>)
 8005ce0:	4a1c      	ldr	r2, [pc, #112]	; (8005d54 <SystemInit+0xf8>)
 8005ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ce4:	4b18      	ldr	r3, [pc, #96]	; (8005d48 <SystemInit+0xec>)
 8005ce6:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <SystemInit+0xfc>)
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005cea:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <SystemInit+0xec>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005cf0:	4b15      	ldr	r3, [pc, #84]	; (8005d48 <SystemInit+0xec>)
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <SystemInit+0xfc>)
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <SystemInit+0xec>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005cfc:	4b12      	ldr	r3, [pc, #72]	; (8005d48 <SystemInit+0xec>)
 8005cfe:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <SystemInit+0xfc>)
 8005d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <SystemInit+0xec>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d08:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <SystemInit+0xec>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a0e      	ldr	r2, [pc, #56]	; (8005d48 <SystemInit+0xec>)
 8005d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <SystemInit+0xec>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005d1a:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <SystemInit+0x100>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b10      	ldr	r3, [pc, #64]	; (8005d60 <SystemInit+0x104>)
 8005d20:	4013      	ands	r3, r2
 8005d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d26:	d202      	bcs.n	8005d2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <SystemInit+0x108>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <SystemInit+0x10c>)
 8005d30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005d34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005d36:	bf00      	nop
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	e000ed00 	.word	0xe000ed00
 8005d44:	52002000 	.word	0x52002000
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005d50:	02020200 	.word	0x02020200
 8005d54:	01ff0000 	.word	0x01ff0000
 8005d58:	01010280 	.word	0x01010280
 8005d5c:	5c001000 	.word	0x5c001000
 8005d60:	ffff0000 	.word	0xffff0000
 8005d64:	51008108 	.word	0x51008108
 8005d68:	52004000 	.word	0x52004000

08005d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005d70:	f7ff ff74 	bl	8005c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005d74:	480c      	ldr	r0, [pc, #48]	; (8005da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005d76:	490d      	ldr	r1, [pc, #52]	; (8005dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005d78:	4a0d      	ldr	r2, [pc, #52]	; (8005db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d7c:	e002      	b.n	8005d84 <LoopCopyDataInit>

08005d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d82:	3304      	adds	r3, #4

08005d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d88:	d3f9      	bcc.n	8005d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005d8c:	4c0a      	ldr	r4, [pc, #40]	; (8005db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d90:	e001      	b.n	8005d96 <LoopFillZerobss>

08005d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d94:	3204      	adds	r2, #4

08005d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005d98:	d3fb      	bcc.n	8005d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005d9a:	f000 f993 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005d9e:	f7ff fbc3 	bl	8005528 <main>
  bx  lr
 8005da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005da4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005dac:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8005db0:	08006f14 	.word	0x08006f14
  ldr r2, =_sbss
 8005db4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8005db8:	240002c4 	.word	0x240002c4

08005dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dbc:	e7fe      	b.n	8005dbc <ADC3_IRQHandler>
	...

08005dc0 <std>:
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8005dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dce:	6083      	str	r3, [r0, #8]
 8005dd0:	8181      	strh	r1, [r0, #12]
 8005dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8005dd4:	81c2      	strh	r2, [r0, #14]
 8005dd6:	6183      	str	r3, [r0, #24]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	2208      	movs	r2, #8
 8005ddc:	305c      	adds	r0, #92	; 0x5c
 8005dde:	f000 f91c 	bl	800601a <memset>
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <std+0x58>)
 8005de4:	6263      	str	r3, [r4, #36]	; 0x24
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <std+0x5c>)
 8005de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <std+0x60>)
 8005dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dee:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <std+0x64>)
 8005df0:	6323      	str	r3, [r4, #48]	; 0x30
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <std+0x68>)
 8005df4:	6224      	str	r4, [r4, #32]
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d006      	beq.n	8005e08 <std+0x48>
 8005dfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005dfe:	4294      	cmp	r4, r2
 8005e00:	d002      	beq.n	8005e08 <std+0x48>
 8005e02:	33d0      	adds	r3, #208	; 0xd0
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d105      	bne.n	8005e14 <std+0x54>
 8005e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f000 b97c 	b.w	800610c <__retarget_lock_init_recursive>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	08005f95 	.word	0x08005f95
 8005e1c:	08005fb7 	.word	0x08005fb7
 8005e20:	08005fef 	.word	0x08005fef
 8005e24:	08006013 	.word	0x08006013
 8005e28:	24000178 	.word	0x24000178

08005e2c <stdio_exit_handler>:
 8005e2c:	4a02      	ldr	r2, [pc, #8]	; (8005e38 <stdio_exit_handler+0xc>)
 8005e2e:	4903      	ldr	r1, [pc, #12]	; (8005e3c <stdio_exit_handler+0x10>)
 8005e30:	4803      	ldr	r0, [pc, #12]	; (8005e40 <stdio_exit_handler+0x14>)
 8005e32:	f000 b869 	b.w	8005f08 <_fwalk_sglue>
 8005e36:	bf00      	nop
 8005e38:	24000010 	.word	0x24000010
 8005e3c:	080069e1 	.word	0x080069e1
 8005e40:	2400001c 	.word	0x2400001c

08005e44 <cleanup_stdio>:
 8005e44:	6841      	ldr	r1, [r0, #4]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	; (8005e78 <cleanup_stdio+0x34>)
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d001      	beq.n	8005e54 <cleanup_stdio+0x10>
 8005e50:	f000 fdc6 	bl	80069e0 <_fflush_r>
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <cleanup_stdio+0x38>)
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d002      	beq.n	8005e62 <cleanup_stdio+0x1e>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fdbf 	bl	80069e0 <_fflush_r>
 8005e62:	68e1      	ldr	r1, [r4, #12]
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <cleanup_stdio+0x3c>)
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d004      	beq.n	8005e74 <cleanup_stdio+0x30>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f000 bdb6 	b.w	80069e0 <_fflush_r>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	24000178 	.word	0x24000178
 8005e7c:	240001e0 	.word	0x240001e0
 8005e80:	24000248 	.word	0x24000248

08005e84 <global_stdio_init.part.0>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <global_stdio_init.part.0+0x30>)
 8005e88:	4c0b      	ldr	r4, [pc, #44]	; (8005eb8 <global_stdio_init.part.0+0x34>)
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <global_stdio_init.part.0+0x38>)
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	2200      	movs	r2, #0
 8005e92:	2104      	movs	r1, #4
 8005e94:	f7ff ff94 	bl	8005dc0 <std>
 8005e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2109      	movs	r1, #9
 8005ea0:	f7ff ff8e 	bl	8005dc0 <std>
 8005ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eae:	2112      	movs	r1, #18
 8005eb0:	f7ff bf86 	b.w	8005dc0 <std>
 8005eb4:	240002b0 	.word	0x240002b0
 8005eb8:	24000178 	.word	0x24000178
 8005ebc:	08005e2d 	.word	0x08005e2d

08005ec0 <__sfp_lock_acquire>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	; (8005ec8 <__sfp_lock_acquire+0x8>)
 8005ec2:	f000 b924 	b.w	800610e <__retarget_lock_acquire_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	240002b9 	.word	0x240002b9

08005ecc <__sfp_lock_release>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	; (8005ed4 <__sfp_lock_release+0x8>)
 8005ece:	f000 b91f 	b.w	8006110 <__retarget_lock_release_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	240002b9 	.word	0x240002b9

08005ed8 <__sinit>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	f7ff fff0 	bl	8005ec0 <__sfp_lock_acquire>
 8005ee0:	6a23      	ldr	r3, [r4, #32]
 8005ee2:	b11b      	cbz	r3, 8005eec <__sinit+0x14>
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f7ff bff0 	b.w	8005ecc <__sfp_lock_release>
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <__sinit+0x28>)
 8005eee:	6223      	str	r3, [r4, #32]
 8005ef0:	4b04      	ldr	r3, [pc, #16]	; (8005f04 <__sinit+0x2c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f5      	bne.n	8005ee4 <__sinit+0xc>
 8005ef8:	f7ff ffc4 	bl	8005e84 <global_stdio_init.part.0>
 8005efc:	e7f2      	b.n	8005ee4 <__sinit+0xc>
 8005efe:	bf00      	nop
 8005f00:	08005e45 	.word	0x08005e45
 8005f04:	240002b0 	.word	0x240002b0

08005f08 <_fwalk_sglue>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	4688      	mov	r8, r1
 8005f10:	4614      	mov	r4, r2
 8005f12:	2600      	movs	r6, #0
 8005f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f18:	f1b9 0901 	subs.w	r9, r9, #1
 8005f1c:	d505      	bpl.n	8005f2a <_fwalk_sglue+0x22>
 8005f1e:	6824      	ldr	r4, [r4, #0]
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d1f7      	bne.n	8005f14 <_fwalk_sglue+0xc>
 8005f24:	4630      	mov	r0, r6
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	89ab      	ldrh	r3, [r5, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d907      	bls.n	8005f40 <_fwalk_sglue+0x38>
 8005f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f34:	3301      	adds	r3, #1
 8005f36:	d003      	beq.n	8005f40 <_fwalk_sglue+0x38>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	4306      	orrs	r6, r0
 8005f40:	3568      	adds	r5, #104	; 0x68
 8005f42:	e7e9      	b.n	8005f18 <_fwalk_sglue+0x10>

08005f44 <putchar>:
 8005f44:	4b02      	ldr	r3, [pc, #8]	; (8005f50 <putchar+0xc>)
 8005f46:	4601      	mov	r1, r0
 8005f48:	6818      	ldr	r0, [r3, #0]
 8005f4a:	6882      	ldr	r2, [r0, #8]
 8005f4c:	f000 bd70 	b.w	8006a30 <_putc_r>
 8005f50:	24000068 	.word	0x24000068

08005f54 <siprintf>:
 8005f54:	b40e      	push	{r1, r2, r3}
 8005f56:	b500      	push	{lr}
 8005f58:	b09c      	sub	sp, #112	; 0x70
 8005f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f5c:	9002      	str	r0, [sp, #8]
 8005f5e:	9006      	str	r0, [sp, #24]
 8005f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f64:	4809      	ldr	r0, [pc, #36]	; (8005f8c <siprintf+0x38>)
 8005f66:	9107      	str	r1, [sp, #28]
 8005f68:	9104      	str	r1, [sp, #16]
 8005f6a:	4909      	ldr	r1, [pc, #36]	; (8005f90 <siprintf+0x3c>)
 8005f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f70:	9105      	str	r1, [sp, #20]
 8005f72:	6800      	ldr	r0, [r0, #0]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	a902      	add	r1, sp, #8
 8005f78:	f000 fa1e 	bl	80063b8 <_svfiprintf_r>
 8005f7c:	9b02      	ldr	r3, [sp, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	b01c      	add	sp, #112	; 0x70
 8005f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f88:	b003      	add	sp, #12
 8005f8a:	4770      	bx	lr
 8005f8c:	24000068 	.word	0x24000068
 8005f90:	ffff0208 	.word	0xffff0208

08005f94 <__sread>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	460c      	mov	r4, r1
 8005f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9c:	f000 f868 	bl	8006070 <_read_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	bfab      	itete	ge
 8005fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fa8:	181b      	addge	r3, r3, r0
 8005faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fae:	bfac      	ite	ge
 8005fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fb2:	81a3      	strhlt	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__swrite>:
 8005fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	461f      	mov	r7, r3
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	05db      	lsls	r3, r3, #23
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	d505      	bpl.n	8005fd4 <__swrite+0x1e>
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	2302      	movs	r3, #2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f000 f83c 	bl	800604c <_lseek_r>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	f000 b853 	b.w	8006094 <_write_r>

08005fee <__sseek>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 f829 	bl	800604c <_lseek_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	bf15      	itete	ne
 8006000:	6560      	strne	r0, [r4, #84]	; 0x54
 8006002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800600a:	81a3      	strheq	r3, [r4, #12]
 800600c:	bf18      	it	ne
 800600e:	81a3      	strhne	r3, [r4, #12]
 8006010:	bd10      	pop	{r4, pc}

08006012 <__sclose>:
 8006012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006016:	f000 b809 	b.w	800602c <_close_r>

0800601a <memset>:
 800601a:	4402      	add	r2, r0
 800601c:	4603      	mov	r3, r0
 800601e:	4293      	cmp	r3, r2
 8006020:	d100      	bne.n	8006024 <memset+0xa>
 8006022:	4770      	bx	lr
 8006024:	f803 1b01 	strb.w	r1, [r3], #1
 8006028:	e7f9      	b.n	800601e <memset+0x4>
	...

0800602c <_close_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4d06      	ldr	r5, [pc, #24]	; (8006048 <_close_r+0x1c>)
 8006030:	2300      	movs	r3, #0
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	602b      	str	r3, [r5, #0]
 8006038:	f7ff fda5 	bl	8005b86 <_close>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d102      	bne.n	8006046 <_close_r+0x1a>
 8006040:	682b      	ldr	r3, [r5, #0]
 8006042:	b103      	cbz	r3, 8006046 <_close_r+0x1a>
 8006044:	6023      	str	r3, [r4, #0]
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	240002b4 	.word	0x240002b4

0800604c <_lseek_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d07      	ldr	r5, [pc, #28]	; (800606c <_lseek_r+0x20>)
 8006050:	4604      	mov	r4, r0
 8006052:	4608      	mov	r0, r1
 8006054:	4611      	mov	r1, r2
 8006056:	2200      	movs	r2, #0
 8006058:	602a      	str	r2, [r5, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	f7ff fdba 	bl	8005bd4 <_lseek>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_lseek_r+0x1e>
 8006064:	682b      	ldr	r3, [r5, #0]
 8006066:	b103      	cbz	r3, 800606a <_lseek_r+0x1e>
 8006068:	6023      	str	r3, [r4, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	240002b4 	.word	0x240002b4

08006070 <_read_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_read_r+0x20>)
 8006074:	4604      	mov	r4, r0
 8006076:	4608      	mov	r0, r1
 8006078:	4611      	mov	r1, r2
 800607a:	2200      	movs	r2, #0
 800607c:	602a      	str	r2, [r5, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	f7ff fd48 	bl	8005b14 <_read>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d102      	bne.n	800608e <_read_r+0x1e>
 8006088:	682b      	ldr	r3, [r5, #0]
 800608a:	b103      	cbz	r3, 800608e <_read_r+0x1e>
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	bd38      	pop	{r3, r4, r5, pc}
 8006090:	240002b4 	.word	0x240002b4

08006094 <_write_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d07      	ldr	r5, [pc, #28]	; (80060b4 <_write_r+0x20>)
 8006098:	4604      	mov	r4, r0
 800609a:	4608      	mov	r0, r1
 800609c:	4611      	mov	r1, r2
 800609e:	2200      	movs	r2, #0
 80060a0:	602a      	str	r2, [r5, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f7ff fd53 	bl	8005b4e <_write>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_write_r+0x1e>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_write_r+0x1e>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	240002b4 	.word	0x240002b4

080060b8 <__errno>:
 80060b8:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <__errno+0x8>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	24000068 	.word	0x24000068

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	; (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	; (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	; (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	; (8006108 <__libc_init_array+0x44>)
 80060d8:	f000 fe68 	bl	8006dac <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08006f0c 	.word	0x08006f0c
 8006100:	08006f0c 	.word	0x08006f0c
 8006104:	08006f0c 	.word	0x08006f0c
 8006108:	08006f10 	.word	0x08006f10

0800610c <__retarget_lock_init_recursive>:
 800610c:	4770      	bx	lr

0800610e <__retarget_lock_acquire_recursive>:
 800610e:	4770      	bx	lr

08006110 <__retarget_lock_release_recursive>:
 8006110:	4770      	bx	lr
	...

08006114 <_free_r>:
 8006114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006116:	2900      	cmp	r1, #0
 8006118:	d044      	beq.n	80061a4 <_free_r+0x90>
 800611a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800611e:	9001      	str	r0, [sp, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	f1a1 0404 	sub.w	r4, r1, #4
 8006126:	bfb8      	it	lt
 8006128:	18e4      	addlt	r4, r4, r3
 800612a:	f000 f8df 	bl	80062ec <__malloc_lock>
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <_free_r+0x94>)
 8006130:	9801      	ldr	r0, [sp, #4]
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	b933      	cbnz	r3, 8006144 <_free_r+0x30>
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	b003      	add	sp, #12
 800613c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006140:	f000 b8da 	b.w	80062f8 <__malloc_unlock>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d908      	bls.n	800615a <_free_r+0x46>
 8006148:	6825      	ldr	r5, [r4, #0]
 800614a:	1961      	adds	r1, r4, r5
 800614c:	428b      	cmp	r3, r1
 800614e:	bf01      	itttt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	1949      	addeq	r1, r1, r5
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	e7ed      	b.n	8006136 <_free_r+0x22>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x50>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x46>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1855      	adds	r5, r2, r1
 8006168:	42a5      	cmp	r5, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x70>
 800616c:	6824      	ldr	r4, [r4, #0]
 800616e:	4421      	add	r1, r4
 8006170:	1854      	adds	r4, r2, r1
 8006172:	42a3      	cmp	r3, r4
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1e0      	bne.n	800613a <_free_r+0x26>
 8006178:	681c      	ldr	r4, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	440c      	add	r4, r1
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	e7da      	b.n	800613a <_free_r+0x26>
 8006184:	d902      	bls.n	800618c <_free_r+0x78>
 8006186:	230c      	movs	r3, #12
 8006188:	6003      	str	r3, [r0, #0]
 800618a:	e7d6      	b.n	800613a <_free_r+0x26>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf04      	itt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	bf04      	itt	eq
 800619c:	1949      	addeq	r1, r1, r5
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	6054      	str	r4, [r2, #4]
 80061a2:	e7ca      	b.n	800613a <_free_r+0x26>
 80061a4:	b003      	add	sp, #12
 80061a6:	bd30      	pop	{r4, r5, pc}
 80061a8:	240002bc 	.word	0x240002bc

080061ac <sbrk_aligned>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	4e0e      	ldr	r6, [pc, #56]	; (80061e8 <sbrk_aligned+0x3c>)
 80061b0:	460c      	mov	r4, r1
 80061b2:	6831      	ldr	r1, [r6, #0]
 80061b4:	4605      	mov	r5, r0
 80061b6:	b911      	cbnz	r1, 80061be <sbrk_aligned+0x12>
 80061b8:	f000 fd1e 	bl	8006bf8 <_sbrk_r>
 80061bc:	6030      	str	r0, [r6, #0]
 80061be:	4621      	mov	r1, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fd19 	bl	8006bf8 <_sbrk_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	d00a      	beq.n	80061e0 <sbrk_aligned+0x34>
 80061ca:	1cc4      	adds	r4, r0, #3
 80061cc:	f024 0403 	bic.w	r4, r4, #3
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	d007      	beq.n	80061e4 <sbrk_aligned+0x38>
 80061d4:	1a21      	subs	r1, r4, r0
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 fd0e 	bl	8006bf8 <_sbrk_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	d101      	bne.n	80061e4 <sbrk_aligned+0x38>
 80061e0:	f04f 34ff 	mov.w	r4, #4294967295
 80061e4:	4620      	mov	r0, r4
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	240002c0 	.word	0x240002c0

080061ec <_malloc_r>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	1ccd      	adds	r5, r1, #3
 80061f2:	f025 0503 	bic.w	r5, r5, #3
 80061f6:	3508      	adds	r5, #8
 80061f8:	2d0c      	cmp	r5, #12
 80061fa:	bf38      	it	cc
 80061fc:	250c      	movcc	r5, #12
 80061fe:	2d00      	cmp	r5, #0
 8006200:	4607      	mov	r7, r0
 8006202:	db01      	blt.n	8006208 <_malloc_r+0x1c>
 8006204:	42a9      	cmp	r1, r5
 8006206:	d905      	bls.n	8006214 <_malloc_r+0x28>
 8006208:	230c      	movs	r3, #12
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	2600      	movs	r6, #0
 800620e:	4630      	mov	r0, r6
 8006210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006214:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062e8 <_malloc_r+0xfc>
 8006218:	f000 f868 	bl	80062ec <__malloc_lock>
 800621c:	f8d8 3000 	ldr.w	r3, [r8]
 8006220:	461c      	mov	r4, r3
 8006222:	bb5c      	cbnz	r4, 800627c <_malloc_r+0x90>
 8006224:	4629      	mov	r1, r5
 8006226:	4638      	mov	r0, r7
 8006228:	f7ff ffc0 	bl	80061ac <sbrk_aligned>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	4604      	mov	r4, r0
 8006230:	d155      	bne.n	80062de <_malloc_r+0xf2>
 8006232:	f8d8 4000 	ldr.w	r4, [r8]
 8006236:	4626      	mov	r6, r4
 8006238:	2e00      	cmp	r6, #0
 800623a:	d145      	bne.n	80062c8 <_malloc_r+0xdc>
 800623c:	2c00      	cmp	r4, #0
 800623e:	d048      	beq.n	80062d2 <_malloc_r+0xe6>
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	4631      	mov	r1, r6
 8006244:	4638      	mov	r0, r7
 8006246:	eb04 0903 	add.w	r9, r4, r3
 800624a:	f000 fcd5 	bl	8006bf8 <_sbrk_r>
 800624e:	4581      	cmp	r9, r0
 8006250:	d13f      	bne.n	80062d2 <_malloc_r+0xe6>
 8006252:	6821      	ldr	r1, [r4, #0]
 8006254:	1a6d      	subs	r5, r5, r1
 8006256:	4629      	mov	r1, r5
 8006258:	4638      	mov	r0, r7
 800625a:	f7ff ffa7 	bl	80061ac <sbrk_aligned>
 800625e:	3001      	adds	r0, #1
 8006260:	d037      	beq.n	80062d2 <_malloc_r+0xe6>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	442b      	add	r3, r5
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	f8d8 3000 	ldr.w	r3, [r8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d038      	beq.n	80062e2 <_malloc_r+0xf6>
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	42a2      	cmp	r2, r4
 8006274:	d12b      	bne.n	80062ce <_malloc_r+0xe2>
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	e00f      	b.n	800629c <_malloc_r+0xb0>
 800627c:	6822      	ldr	r2, [r4, #0]
 800627e:	1b52      	subs	r2, r2, r5
 8006280:	d41f      	bmi.n	80062c2 <_malloc_r+0xd6>
 8006282:	2a0b      	cmp	r2, #11
 8006284:	d917      	bls.n	80062b6 <_malloc_r+0xca>
 8006286:	1961      	adds	r1, r4, r5
 8006288:	42a3      	cmp	r3, r4
 800628a:	6025      	str	r5, [r4, #0]
 800628c:	bf18      	it	ne
 800628e:	6059      	strne	r1, [r3, #4]
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	bf08      	it	eq
 8006294:	f8c8 1000 	streq.w	r1, [r8]
 8006298:	5162      	str	r2, [r4, r5]
 800629a:	604b      	str	r3, [r1, #4]
 800629c:	4638      	mov	r0, r7
 800629e:	f104 060b 	add.w	r6, r4, #11
 80062a2:	f000 f829 	bl	80062f8 <__malloc_unlock>
 80062a6:	f026 0607 	bic.w	r6, r6, #7
 80062aa:	1d23      	adds	r3, r4, #4
 80062ac:	1af2      	subs	r2, r6, r3
 80062ae:	d0ae      	beq.n	800620e <_malloc_r+0x22>
 80062b0:	1b9b      	subs	r3, r3, r6
 80062b2:	50a3      	str	r3, [r4, r2]
 80062b4:	e7ab      	b.n	800620e <_malloc_r+0x22>
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	6862      	ldr	r2, [r4, #4]
 80062ba:	d1dd      	bne.n	8006278 <_malloc_r+0x8c>
 80062bc:	f8c8 2000 	str.w	r2, [r8]
 80062c0:	e7ec      	b.n	800629c <_malloc_r+0xb0>
 80062c2:	4623      	mov	r3, r4
 80062c4:	6864      	ldr	r4, [r4, #4]
 80062c6:	e7ac      	b.n	8006222 <_malloc_r+0x36>
 80062c8:	4634      	mov	r4, r6
 80062ca:	6876      	ldr	r6, [r6, #4]
 80062cc:	e7b4      	b.n	8006238 <_malloc_r+0x4c>
 80062ce:	4613      	mov	r3, r2
 80062d0:	e7cc      	b.n	800626c <_malloc_r+0x80>
 80062d2:	230c      	movs	r3, #12
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	4638      	mov	r0, r7
 80062d8:	f000 f80e 	bl	80062f8 <__malloc_unlock>
 80062dc:	e797      	b.n	800620e <_malloc_r+0x22>
 80062de:	6025      	str	r5, [r4, #0]
 80062e0:	e7dc      	b.n	800629c <_malloc_r+0xb0>
 80062e2:	605b      	str	r3, [r3, #4]
 80062e4:	deff      	udf	#255	; 0xff
 80062e6:	bf00      	nop
 80062e8:	240002bc 	.word	0x240002bc

080062ec <__malloc_lock>:
 80062ec:	4801      	ldr	r0, [pc, #4]	; (80062f4 <__malloc_lock+0x8>)
 80062ee:	f7ff bf0e 	b.w	800610e <__retarget_lock_acquire_recursive>
 80062f2:	bf00      	nop
 80062f4:	240002b8 	.word	0x240002b8

080062f8 <__malloc_unlock>:
 80062f8:	4801      	ldr	r0, [pc, #4]	; (8006300 <__malloc_unlock+0x8>)
 80062fa:	f7ff bf09 	b.w	8006110 <__retarget_lock_release_recursive>
 80062fe:	bf00      	nop
 8006300:	240002b8 	.word	0x240002b8

08006304 <__ssputs_r>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	688e      	ldr	r6, [r1, #8]
 800630a:	461f      	mov	r7, r3
 800630c:	42be      	cmp	r6, r7
 800630e:	680b      	ldr	r3, [r1, #0]
 8006310:	4682      	mov	sl, r0
 8006312:	460c      	mov	r4, r1
 8006314:	4690      	mov	r8, r2
 8006316:	d82c      	bhi.n	8006372 <__ssputs_r+0x6e>
 8006318:	898a      	ldrh	r2, [r1, #12]
 800631a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800631e:	d026      	beq.n	800636e <__ssputs_r+0x6a>
 8006320:	6965      	ldr	r5, [r4, #20]
 8006322:	6909      	ldr	r1, [r1, #16]
 8006324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006328:	eba3 0901 	sub.w	r9, r3, r1
 800632c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006330:	1c7b      	adds	r3, r7, #1
 8006332:	444b      	add	r3, r9
 8006334:	106d      	asrs	r5, r5, #1
 8006336:	429d      	cmp	r5, r3
 8006338:	bf38      	it	cc
 800633a:	461d      	movcc	r5, r3
 800633c:	0553      	lsls	r3, r2, #21
 800633e:	d527      	bpl.n	8006390 <__ssputs_r+0x8c>
 8006340:	4629      	mov	r1, r5
 8006342:	f7ff ff53 	bl	80061ec <_malloc_r>
 8006346:	4606      	mov	r6, r0
 8006348:	b360      	cbz	r0, 80063a4 <__ssputs_r+0xa0>
 800634a:	6921      	ldr	r1, [r4, #16]
 800634c:	464a      	mov	r2, r9
 800634e:	f000 fc63 	bl	8006c18 <memcpy>
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800635c:	81a3      	strh	r3, [r4, #12]
 800635e:	6126      	str	r6, [r4, #16]
 8006360:	6165      	str	r5, [r4, #20]
 8006362:	444e      	add	r6, r9
 8006364:	eba5 0509 	sub.w	r5, r5, r9
 8006368:	6026      	str	r6, [r4, #0]
 800636a:	60a5      	str	r5, [r4, #8]
 800636c:	463e      	mov	r6, r7
 800636e:	42be      	cmp	r6, r7
 8006370:	d900      	bls.n	8006374 <__ssputs_r+0x70>
 8006372:	463e      	mov	r6, r7
 8006374:	6820      	ldr	r0, [r4, #0]
 8006376:	4632      	mov	r2, r6
 8006378:	4641      	mov	r1, r8
 800637a:	f000 fc23 	bl	8006bc4 <memmove>
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	1b9b      	subs	r3, r3, r6
 8006382:	60a3      	str	r3, [r4, #8]
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	4433      	add	r3, r6
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	2000      	movs	r0, #0
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	462a      	mov	r2, r5
 8006392:	f000 fc4f 	bl	8006c34 <_realloc_r>
 8006396:	4606      	mov	r6, r0
 8006398:	2800      	cmp	r0, #0
 800639a:	d1e0      	bne.n	800635e <__ssputs_r+0x5a>
 800639c:	6921      	ldr	r1, [r4, #16]
 800639e:	4650      	mov	r0, sl
 80063a0:	f7ff feb8 	bl	8006114 <_free_r>
 80063a4:	230c      	movs	r3, #12
 80063a6:	f8ca 3000 	str.w	r3, [sl]
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	f04f 30ff 	mov.w	r0, #4294967295
 80063b6:	e7e9      	b.n	800638c <__ssputs_r+0x88>

080063b8 <_svfiprintf_r>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4698      	mov	r8, r3
 80063be:	898b      	ldrh	r3, [r1, #12]
 80063c0:	061b      	lsls	r3, r3, #24
 80063c2:	b09d      	sub	sp, #116	; 0x74
 80063c4:	4607      	mov	r7, r0
 80063c6:	460d      	mov	r5, r1
 80063c8:	4614      	mov	r4, r2
 80063ca:	d50e      	bpl.n	80063ea <_svfiprintf_r+0x32>
 80063cc:	690b      	ldr	r3, [r1, #16]
 80063ce:	b963      	cbnz	r3, 80063ea <_svfiprintf_r+0x32>
 80063d0:	2140      	movs	r1, #64	; 0x40
 80063d2:	f7ff ff0b 	bl	80061ec <_malloc_r>
 80063d6:	6028      	str	r0, [r5, #0]
 80063d8:	6128      	str	r0, [r5, #16]
 80063da:	b920      	cbnz	r0, 80063e6 <_svfiprintf_r+0x2e>
 80063dc:	230c      	movs	r3, #12
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	e0d0      	b.n	8006588 <_svfiprintf_r+0x1d0>
 80063e6:	2340      	movs	r3, #64	; 0x40
 80063e8:	616b      	str	r3, [r5, #20]
 80063ea:	2300      	movs	r3, #0
 80063ec:	9309      	str	r3, [sp, #36]	; 0x24
 80063ee:	2320      	movs	r3, #32
 80063f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80063f8:	2330      	movs	r3, #48	; 0x30
 80063fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80065a0 <_svfiprintf_r+0x1e8>
 80063fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006402:	f04f 0901 	mov.w	r9, #1
 8006406:	4623      	mov	r3, r4
 8006408:	469a      	mov	sl, r3
 800640a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800640e:	b10a      	cbz	r2, 8006414 <_svfiprintf_r+0x5c>
 8006410:	2a25      	cmp	r2, #37	; 0x25
 8006412:	d1f9      	bne.n	8006408 <_svfiprintf_r+0x50>
 8006414:	ebba 0b04 	subs.w	fp, sl, r4
 8006418:	d00b      	beq.n	8006432 <_svfiprintf_r+0x7a>
 800641a:	465b      	mov	r3, fp
 800641c:	4622      	mov	r2, r4
 800641e:	4629      	mov	r1, r5
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff ff6f 	bl	8006304 <__ssputs_r>
 8006426:	3001      	adds	r0, #1
 8006428:	f000 80a9 	beq.w	800657e <_svfiprintf_r+0x1c6>
 800642c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800642e:	445a      	add	r2, fp
 8006430:	9209      	str	r2, [sp, #36]	; 0x24
 8006432:	f89a 3000 	ldrb.w	r3, [sl]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80a1 	beq.w	800657e <_svfiprintf_r+0x1c6>
 800643c:	2300      	movs	r3, #0
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006446:	f10a 0a01 	add.w	sl, sl, #1
 800644a:	9304      	str	r3, [sp, #16]
 800644c:	9307      	str	r3, [sp, #28]
 800644e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006452:	931a      	str	r3, [sp, #104]	; 0x68
 8006454:	4654      	mov	r4, sl
 8006456:	2205      	movs	r2, #5
 8006458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800645c:	4850      	ldr	r0, [pc, #320]	; (80065a0 <_svfiprintf_r+0x1e8>)
 800645e:	f7f9 ff47 	bl	80002f0 <memchr>
 8006462:	9a04      	ldr	r2, [sp, #16]
 8006464:	b9d8      	cbnz	r0, 800649e <_svfiprintf_r+0xe6>
 8006466:	06d0      	lsls	r0, r2, #27
 8006468:	bf44      	itt	mi
 800646a:	2320      	movmi	r3, #32
 800646c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006470:	0711      	lsls	r1, r2, #28
 8006472:	bf44      	itt	mi
 8006474:	232b      	movmi	r3, #43	; 0x2b
 8006476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800647a:	f89a 3000 	ldrb.w	r3, [sl]
 800647e:	2b2a      	cmp	r3, #42	; 0x2a
 8006480:	d015      	beq.n	80064ae <_svfiprintf_r+0xf6>
 8006482:	9a07      	ldr	r2, [sp, #28]
 8006484:	4654      	mov	r4, sl
 8006486:	2000      	movs	r0, #0
 8006488:	f04f 0c0a 	mov.w	ip, #10
 800648c:	4621      	mov	r1, r4
 800648e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006492:	3b30      	subs	r3, #48	; 0x30
 8006494:	2b09      	cmp	r3, #9
 8006496:	d94d      	bls.n	8006534 <_svfiprintf_r+0x17c>
 8006498:	b1b0      	cbz	r0, 80064c8 <_svfiprintf_r+0x110>
 800649a:	9207      	str	r2, [sp, #28]
 800649c:	e014      	b.n	80064c8 <_svfiprintf_r+0x110>
 800649e:	eba0 0308 	sub.w	r3, r0, r8
 80064a2:	fa09 f303 	lsl.w	r3, r9, r3
 80064a6:	4313      	orrs	r3, r2
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	46a2      	mov	sl, r4
 80064ac:	e7d2      	b.n	8006454 <_svfiprintf_r+0x9c>
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	9103      	str	r1, [sp, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bfbb      	ittet	lt
 80064ba:	425b      	neglt	r3, r3
 80064bc:	f042 0202 	orrlt.w	r2, r2, #2
 80064c0:	9307      	strge	r3, [sp, #28]
 80064c2:	9307      	strlt	r3, [sp, #28]
 80064c4:	bfb8      	it	lt
 80064c6:	9204      	strlt	r2, [sp, #16]
 80064c8:	7823      	ldrb	r3, [r4, #0]
 80064ca:	2b2e      	cmp	r3, #46	; 0x2e
 80064cc:	d10c      	bne.n	80064e8 <_svfiprintf_r+0x130>
 80064ce:	7863      	ldrb	r3, [r4, #1]
 80064d0:	2b2a      	cmp	r3, #42	; 0x2a
 80064d2:	d134      	bne.n	800653e <_svfiprintf_r+0x186>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	1d1a      	adds	r2, r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	9203      	str	r2, [sp, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfb8      	it	lt
 80064e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80064e4:	3402      	adds	r4, #2
 80064e6:	9305      	str	r3, [sp, #20]
 80064e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80065b0 <_svfiprintf_r+0x1f8>
 80064ec:	7821      	ldrb	r1, [r4, #0]
 80064ee:	2203      	movs	r2, #3
 80064f0:	4650      	mov	r0, sl
 80064f2:	f7f9 fefd 	bl	80002f0 <memchr>
 80064f6:	b138      	cbz	r0, 8006508 <_svfiprintf_r+0x150>
 80064f8:	9b04      	ldr	r3, [sp, #16]
 80064fa:	eba0 000a 	sub.w	r0, r0, sl
 80064fe:	2240      	movs	r2, #64	; 0x40
 8006500:	4082      	lsls	r2, r0
 8006502:	4313      	orrs	r3, r2
 8006504:	3401      	adds	r4, #1
 8006506:	9304      	str	r3, [sp, #16]
 8006508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650c:	4825      	ldr	r0, [pc, #148]	; (80065a4 <_svfiprintf_r+0x1ec>)
 800650e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006512:	2206      	movs	r2, #6
 8006514:	f7f9 feec 	bl	80002f0 <memchr>
 8006518:	2800      	cmp	r0, #0
 800651a:	d038      	beq.n	800658e <_svfiprintf_r+0x1d6>
 800651c:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <_svfiprintf_r+0x1f0>)
 800651e:	bb1b      	cbnz	r3, 8006568 <_svfiprintf_r+0x1b0>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	3307      	adds	r3, #7
 8006524:	f023 0307 	bic.w	r3, r3, #7
 8006528:	3308      	adds	r3, #8
 800652a:	9303      	str	r3, [sp, #12]
 800652c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800652e:	4433      	add	r3, r6
 8006530:	9309      	str	r3, [sp, #36]	; 0x24
 8006532:	e768      	b.n	8006406 <_svfiprintf_r+0x4e>
 8006534:	fb0c 3202 	mla	r2, ip, r2, r3
 8006538:	460c      	mov	r4, r1
 800653a:	2001      	movs	r0, #1
 800653c:	e7a6      	b.n	800648c <_svfiprintf_r+0xd4>
 800653e:	2300      	movs	r3, #0
 8006540:	3401      	adds	r4, #1
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	4619      	mov	r1, r3
 8006546:	f04f 0c0a 	mov.w	ip, #10
 800654a:	4620      	mov	r0, r4
 800654c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006550:	3a30      	subs	r2, #48	; 0x30
 8006552:	2a09      	cmp	r2, #9
 8006554:	d903      	bls.n	800655e <_svfiprintf_r+0x1a6>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0c6      	beq.n	80064e8 <_svfiprintf_r+0x130>
 800655a:	9105      	str	r1, [sp, #20]
 800655c:	e7c4      	b.n	80064e8 <_svfiprintf_r+0x130>
 800655e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006562:	4604      	mov	r4, r0
 8006564:	2301      	movs	r3, #1
 8006566:	e7f0      	b.n	800654a <_svfiprintf_r+0x192>
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	462a      	mov	r2, r5
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <_svfiprintf_r+0x1f4>)
 8006570:	a904      	add	r1, sp, #16
 8006572:	4638      	mov	r0, r7
 8006574:	f3af 8000 	nop.w
 8006578:	1c42      	adds	r2, r0, #1
 800657a:	4606      	mov	r6, r0
 800657c:	d1d6      	bne.n	800652c <_svfiprintf_r+0x174>
 800657e:	89ab      	ldrh	r3, [r5, #12]
 8006580:	065b      	lsls	r3, r3, #25
 8006582:	f53f af2d 	bmi.w	80063e0 <_svfiprintf_r+0x28>
 8006586:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006588:	b01d      	add	sp, #116	; 0x74
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658e:	ab03      	add	r3, sp, #12
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	462a      	mov	r2, r5
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <_svfiprintf_r+0x1f4>)
 8006596:	a904      	add	r1, sp, #16
 8006598:	4638      	mov	r0, r7
 800659a:	f000 f879 	bl	8006690 <_printf_i>
 800659e:	e7eb      	b.n	8006578 <_svfiprintf_r+0x1c0>
 80065a0:	08006ed0 	.word	0x08006ed0
 80065a4:	08006eda 	.word	0x08006eda
 80065a8:	00000000 	.word	0x00000000
 80065ac:	08006305 	.word	0x08006305
 80065b0:	08006ed6 	.word	0x08006ed6

080065b4 <_printf_common>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	4616      	mov	r6, r2
 80065ba:	4699      	mov	r9, r3
 80065bc:	688a      	ldr	r2, [r1, #8]
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065c4:	4293      	cmp	r3, r2
 80065c6:	bfb8      	it	lt
 80065c8:	4613      	movlt	r3, r2
 80065ca:	6033      	str	r3, [r6, #0]
 80065cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065d0:	4607      	mov	r7, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	b10a      	cbz	r2, 80065da <_printf_common+0x26>
 80065d6:	3301      	adds	r3, #1
 80065d8:	6033      	str	r3, [r6, #0]
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	0699      	lsls	r1, r3, #26
 80065de:	bf42      	ittt	mi
 80065e0:	6833      	ldrmi	r3, [r6, #0]
 80065e2:	3302      	addmi	r3, #2
 80065e4:	6033      	strmi	r3, [r6, #0]
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	f015 0506 	ands.w	r5, r5, #6
 80065ec:	d106      	bne.n	80065fc <_printf_common+0x48>
 80065ee:	f104 0a19 	add.w	sl, r4, #25
 80065f2:	68e3      	ldr	r3, [r4, #12]
 80065f4:	6832      	ldr	r2, [r6, #0]
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	42ab      	cmp	r3, r5
 80065fa:	dc26      	bgt.n	800664a <_printf_common+0x96>
 80065fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006600:	1e13      	subs	r3, r2, #0
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	bf18      	it	ne
 8006606:	2301      	movne	r3, #1
 8006608:	0692      	lsls	r2, r2, #26
 800660a:	d42b      	bmi.n	8006664 <_printf_common+0xb0>
 800660c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006610:	4649      	mov	r1, r9
 8006612:	4638      	mov	r0, r7
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d01e      	beq.n	8006658 <_printf_common+0xa4>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	6922      	ldr	r2, [r4, #16]
 800661e:	f003 0306 	and.w	r3, r3, #6
 8006622:	2b04      	cmp	r3, #4
 8006624:	bf02      	ittt	eq
 8006626:	68e5      	ldreq	r5, [r4, #12]
 8006628:	6833      	ldreq	r3, [r6, #0]
 800662a:	1aed      	subeq	r5, r5, r3
 800662c:	68a3      	ldr	r3, [r4, #8]
 800662e:	bf0c      	ite	eq
 8006630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006634:	2500      	movne	r5, #0
 8006636:	4293      	cmp	r3, r2
 8006638:	bfc4      	itt	gt
 800663a:	1a9b      	subgt	r3, r3, r2
 800663c:	18ed      	addgt	r5, r5, r3
 800663e:	2600      	movs	r6, #0
 8006640:	341a      	adds	r4, #26
 8006642:	42b5      	cmp	r5, r6
 8006644:	d11a      	bne.n	800667c <_printf_common+0xc8>
 8006646:	2000      	movs	r0, #0
 8006648:	e008      	b.n	800665c <_printf_common+0xa8>
 800664a:	2301      	movs	r3, #1
 800664c:	4652      	mov	r2, sl
 800664e:	4649      	mov	r1, r9
 8006650:	4638      	mov	r0, r7
 8006652:	47c0      	blx	r8
 8006654:	3001      	adds	r0, #1
 8006656:	d103      	bne.n	8006660 <_printf_common+0xac>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006660:	3501      	adds	r5, #1
 8006662:	e7c6      	b.n	80065f2 <_printf_common+0x3e>
 8006664:	18e1      	adds	r1, r4, r3
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	2030      	movs	r0, #48	; 0x30
 800666a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800666e:	4422      	add	r2, r4
 8006670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006678:	3302      	adds	r3, #2
 800667a:	e7c7      	b.n	800660c <_printf_common+0x58>
 800667c:	2301      	movs	r3, #1
 800667e:	4622      	mov	r2, r4
 8006680:	4649      	mov	r1, r9
 8006682:	4638      	mov	r0, r7
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d0e6      	beq.n	8006658 <_printf_common+0xa4>
 800668a:	3601      	adds	r6, #1
 800668c:	e7d9      	b.n	8006642 <_printf_common+0x8e>
	...

08006690 <_printf_i>:
 8006690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	7e0f      	ldrb	r7, [r1, #24]
 8006696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006698:	2f78      	cmp	r7, #120	; 0x78
 800669a:	4691      	mov	r9, r2
 800669c:	4680      	mov	r8, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	469a      	mov	sl, r3
 80066a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066a6:	d807      	bhi.n	80066b8 <_printf_i+0x28>
 80066a8:	2f62      	cmp	r7, #98	; 0x62
 80066aa:	d80a      	bhi.n	80066c2 <_printf_i+0x32>
 80066ac:	2f00      	cmp	r7, #0
 80066ae:	f000 80d4 	beq.w	800685a <_printf_i+0x1ca>
 80066b2:	2f58      	cmp	r7, #88	; 0x58
 80066b4:	f000 80c0 	beq.w	8006838 <_printf_i+0x1a8>
 80066b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066c0:	e03a      	b.n	8006738 <_printf_i+0xa8>
 80066c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066c6:	2b15      	cmp	r3, #21
 80066c8:	d8f6      	bhi.n	80066b8 <_printf_i+0x28>
 80066ca:	a101      	add	r1, pc, #4	; (adr r1, 80066d0 <_printf_i+0x40>)
 80066cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066d0:	08006729 	.word	0x08006729
 80066d4:	0800673d 	.word	0x0800673d
 80066d8:	080066b9 	.word	0x080066b9
 80066dc:	080066b9 	.word	0x080066b9
 80066e0:	080066b9 	.word	0x080066b9
 80066e4:	080066b9 	.word	0x080066b9
 80066e8:	0800673d 	.word	0x0800673d
 80066ec:	080066b9 	.word	0x080066b9
 80066f0:	080066b9 	.word	0x080066b9
 80066f4:	080066b9 	.word	0x080066b9
 80066f8:	080066b9 	.word	0x080066b9
 80066fc:	08006841 	.word	0x08006841
 8006700:	08006769 	.word	0x08006769
 8006704:	080067fb 	.word	0x080067fb
 8006708:	080066b9 	.word	0x080066b9
 800670c:	080066b9 	.word	0x080066b9
 8006710:	08006863 	.word	0x08006863
 8006714:	080066b9 	.word	0x080066b9
 8006718:	08006769 	.word	0x08006769
 800671c:	080066b9 	.word	0x080066b9
 8006720:	080066b9 	.word	0x080066b9
 8006724:	08006803 	.word	0x08006803
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	1d1a      	adds	r2, r3, #4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	602a      	str	r2, [r5, #0]
 8006730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006738:	2301      	movs	r3, #1
 800673a:	e09f      	b.n	800687c <_printf_i+0x1ec>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	0607      	lsls	r7, r0, #24
 8006742:	f103 0104 	add.w	r1, r3, #4
 8006746:	6029      	str	r1, [r5, #0]
 8006748:	d501      	bpl.n	800674e <_printf_i+0xbe>
 800674a:	681e      	ldr	r6, [r3, #0]
 800674c:	e003      	b.n	8006756 <_printf_i+0xc6>
 800674e:	0646      	lsls	r6, r0, #25
 8006750:	d5fb      	bpl.n	800674a <_printf_i+0xba>
 8006752:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006756:	2e00      	cmp	r6, #0
 8006758:	da03      	bge.n	8006762 <_printf_i+0xd2>
 800675a:	232d      	movs	r3, #45	; 0x2d
 800675c:	4276      	negs	r6, r6
 800675e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006762:	485a      	ldr	r0, [pc, #360]	; (80068cc <_printf_i+0x23c>)
 8006764:	230a      	movs	r3, #10
 8006766:	e012      	b.n	800678e <_printf_i+0xfe>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	1d19      	adds	r1, r3, #4
 800676e:	6029      	str	r1, [r5, #0]
 8006770:	0605      	lsls	r5, r0, #24
 8006772:	d501      	bpl.n	8006778 <_printf_i+0xe8>
 8006774:	681e      	ldr	r6, [r3, #0]
 8006776:	e002      	b.n	800677e <_printf_i+0xee>
 8006778:	0641      	lsls	r1, r0, #25
 800677a:	d5fb      	bpl.n	8006774 <_printf_i+0xe4>
 800677c:	881e      	ldrh	r6, [r3, #0]
 800677e:	4853      	ldr	r0, [pc, #332]	; (80068cc <_printf_i+0x23c>)
 8006780:	2f6f      	cmp	r7, #111	; 0x6f
 8006782:	bf0c      	ite	eq
 8006784:	2308      	moveq	r3, #8
 8006786:	230a      	movne	r3, #10
 8006788:	2100      	movs	r1, #0
 800678a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800678e:	6865      	ldr	r5, [r4, #4]
 8006790:	60a5      	str	r5, [r4, #8]
 8006792:	2d00      	cmp	r5, #0
 8006794:	bfa2      	ittt	ge
 8006796:	6821      	ldrge	r1, [r4, #0]
 8006798:	f021 0104 	bicge.w	r1, r1, #4
 800679c:	6021      	strge	r1, [r4, #0]
 800679e:	b90e      	cbnz	r6, 80067a4 <_printf_i+0x114>
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	d04b      	beq.n	800683c <_printf_i+0x1ac>
 80067a4:	4615      	mov	r5, r2
 80067a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80067aa:	fb03 6711 	mls	r7, r3, r1, r6
 80067ae:	5dc7      	ldrb	r7, [r0, r7]
 80067b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067b4:	4637      	mov	r7, r6
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	460e      	mov	r6, r1
 80067ba:	d9f4      	bls.n	80067a6 <_printf_i+0x116>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10b      	bne.n	80067d8 <_printf_i+0x148>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	07de      	lsls	r6, r3, #31
 80067c4:	d508      	bpl.n	80067d8 <_printf_i+0x148>
 80067c6:	6923      	ldr	r3, [r4, #16]
 80067c8:	6861      	ldr	r1, [r4, #4]
 80067ca:	4299      	cmp	r1, r3
 80067cc:	bfde      	ittt	le
 80067ce:	2330      	movle	r3, #48	; 0x30
 80067d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067d8:	1b52      	subs	r2, r2, r5
 80067da:	6122      	str	r2, [r4, #16]
 80067dc:	f8cd a000 	str.w	sl, [sp]
 80067e0:	464b      	mov	r3, r9
 80067e2:	aa03      	add	r2, sp, #12
 80067e4:	4621      	mov	r1, r4
 80067e6:	4640      	mov	r0, r8
 80067e8:	f7ff fee4 	bl	80065b4 <_printf_common>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d14a      	bne.n	8006886 <_printf_i+0x1f6>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b004      	add	sp, #16
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	f043 0320 	orr.w	r3, r3, #32
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	4833      	ldr	r0, [pc, #204]	; (80068d0 <_printf_i+0x240>)
 8006804:	2778      	movs	r7, #120	; 0x78
 8006806:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6829      	ldr	r1, [r5, #0]
 800680e:	061f      	lsls	r7, r3, #24
 8006810:	f851 6b04 	ldr.w	r6, [r1], #4
 8006814:	d402      	bmi.n	800681c <_printf_i+0x18c>
 8006816:	065f      	lsls	r7, r3, #25
 8006818:	bf48      	it	mi
 800681a:	b2b6      	uxthmi	r6, r6
 800681c:	07df      	lsls	r7, r3, #31
 800681e:	bf48      	it	mi
 8006820:	f043 0320 	orrmi.w	r3, r3, #32
 8006824:	6029      	str	r1, [r5, #0]
 8006826:	bf48      	it	mi
 8006828:	6023      	strmi	r3, [r4, #0]
 800682a:	b91e      	cbnz	r6, 8006834 <_printf_i+0x1a4>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	2310      	movs	r3, #16
 8006836:	e7a7      	b.n	8006788 <_printf_i+0xf8>
 8006838:	4824      	ldr	r0, [pc, #144]	; (80068cc <_printf_i+0x23c>)
 800683a:	e7e4      	b.n	8006806 <_printf_i+0x176>
 800683c:	4615      	mov	r5, r2
 800683e:	e7bd      	b.n	80067bc <_printf_i+0x12c>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	6826      	ldr	r6, [r4, #0]
 8006844:	6961      	ldr	r1, [r4, #20]
 8006846:	1d18      	adds	r0, r3, #4
 8006848:	6028      	str	r0, [r5, #0]
 800684a:	0635      	lsls	r5, r6, #24
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	d501      	bpl.n	8006854 <_printf_i+0x1c4>
 8006850:	6019      	str	r1, [r3, #0]
 8006852:	e002      	b.n	800685a <_printf_i+0x1ca>
 8006854:	0670      	lsls	r0, r6, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0x1c0>
 8006858:	8019      	strh	r1, [r3, #0]
 800685a:	2300      	movs	r3, #0
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	4615      	mov	r5, r2
 8006860:	e7bc      	b.n	80067dc <_printf_i+0x14c>
 8006862:	682b      	ldr	r3, [r5, #0]
 8006864:	1d1a      	adds	r2, r3, #4
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	681d      	ldr	r5, [r3, #0]
 800686a:	6862      	ldr	r2, [r4, #4]
 800686c:	2100      	movs	r1, #0
 800686e:	4628      	mov	r0, r5
 8006870:	f7f9 fd3e 	bl	80002f0 <memchr>
 8006874:	b108      	cbz	r0, 800687a <_printf_i+0x1ea>
 8006876:	1b40      	subs	r0, r0, r5
 8006878:	6060      	str	r0, [r4, #4]
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	6123      	str	r3, [r4, #16]
 800687e:	2300      	movs	r3, #0
 8006880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006884:	e7aa      	b.n	80067dc <_printf_i+0x14c>
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	462a      	mov	r2, r5
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d0ad      	beq.n	80067f0 <_printf_i+0x160>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	079b      	lsls	r3, r3, #30
 8006898:	d413      	bmi.n	80068c2 <_printf_i+0x232>
 800689a:	68e0      	ldr	r0, [r4, #12]
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	4298      	cmp	r0, r3
 80068a0:	bfb8      	it	lt
 80068a2:	4618      	movlt	r0, r3
 80068a4:	e7a6      	b.n	80067f4 <_printf_i+0x164>
 80068a6:	2301      	movs	r3, #1
 80068a8:	4632      	mov	r2, r6
 80068aa:	4649      	mov	r1, r9
 80068ac:	4640      	mov	r0, r8
 80068ae:	47d0      	blx	sl
 80068b0:	3001      	adds	r0, #1
 80068b2:	d09d      	beq.n	80067f0 <_printf_i+0x160>
 80068b4:	3501      	adds	r5, #1
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	9903      	ldr	r1, [sp, #12]
 80068ba:	1a5b      	subs	r3, r3, r1
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dcf2      	bgt.n	80068a6 <_printf_i+0x216>
 80068c0:	e7eb      	b.n	800689a <_printf_i+0x20a>
 80068c2:	2500      	movs	r5, #0
 80068c4:	f104 0619 	add.w	r6, r4, #25
 80068c8:	e7f5      	b.n	80068b6 <_printf_i+0x226>
 80068ca:	bf00      	nop
 80068cc:	08006ee1 	.word	0x08006ee1
 80068d0:	08006ef2 	.word	0x08006ef2

080068d4 <__sflush_r>:
 80068d4:	898a      	ldrh	r2, [r1, #12]
 80068d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068da:	4605      	mov	r5, r0
 80068dc:	0710      	lsls	r0, r2, #28
 80068de:	460c      	mov	r4, r1
 80068e0:	d458      	bmi.n	8006994 <__sflush_r+0xc0>
 80068e2:	684b      	ldr	r3, [r1, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	dc05      	bgt.n	80068f4 <__sflush_r+0x20>
 80068e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dc02      	bgt.n	80068f4 <__sflush_r+0x20>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	d0f9      	beq.n	80068ee <__sflush_r+0x1a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006900:	682f      	ldr	r7, [r5, #0]
 8006902:	6a21      	ldr	r1, [r4, #32]
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	d032      	beq.n	800696e <__sflush_r+0x9a>
 8006908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	075a      	lsls	r2, r3, #29
 800690e:	d505      	bpl.n	800691c <__sflush_r+0x48>
 8006910:	6863      	ldr	r3, [r4, #4]
 8006912:	1ac0      	subs	r0, r0, r3
 8006914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006916:	b10b      	cbz	r3, 800691c <__sflush_r+0x48>
 8006918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800691a:	1ac0      	subs	r0, r0, r3
 800691c:	2300      	movs	r3, #0
 800691e:	4602      	mov	r2, r0
 8006920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006922:	6a21      	ldr	r1, [r4, #32]
 8006924:	4628      	mov	r0, r5
 8006926:	47b0      	blx	r6
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	89a3      	ldrh	r3, [r4, #12]
 800692c:	d106      	bne.n	800693c <__sflush_r+0x68>
 800692e:	6829      	ldr	r1, [r5, #0]
 8006930:	291d      	cmp	r1, #29
 8006932:	d82b      	bhi.n	800698c <__sflush_r+0xb8>
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <__sflush_r+0x108>)
 8006936:	410a      	asrs	r2, r1
 8006938:	07d6      	lsls	r6, r2, #31
 800693a:	d427      	bmi.n	800698c <__sflush_r+0xb8>
 800693c:	2200      	movs	r2, #0
 800693e:	6062      	str	r2, [r4, #4]
 8006940:	04d9      	lsls	r1, r3, #19
 8006942:	6922      	ldr	r2, [r4, #16]
 8006944:	6022      	str	r2, [r4, #0]
 8006946:	d504      	bpl.n	8006952 <__sflush_r+0x7e>
 8006948:	1c42      	adds	r2, r0, #1
 800694a:	d101      	bne.n	8006950 <__sflush_r+0x7c>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b903      	cbnz	r3, 8006952 <__sflush_r+0x7e>
 8006950:	6560      	str	r0, [r4, #84]	; 0x54
 8006952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006954:	602f      	str	r7, [r5, #0]
 8006956:	2900      	cmp	r1, #0
 8006958:	d0c9      	beq.n	80068ee <__sflush_r+0x1a>
 800695a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800695e:	4299      	cmp	r1, r3
 8006960:	d002      	beq.n	8006968 <__sflush_r+0x94>
 8006962:	4628      	mov	r0, r5
 8006964:	f7ff fbd6 	bl	8006114 <_free_r>
 8006968:	2000      	movs	r0, #0
 800696a:	6360      	str	r0, [r4, #52]	; 0x34
 800696c:	e7c0      	b.n	80068f0 <__sflush_r+0x1c>
 800696e:	2301      	movs	r3, #1
 8006970:	4628      	mov	r0, r5
 8006972:	47b0      	blx	r6
 8006974:	1c41      	adds	r1, r0, #1
 8006976:	d1c8      	bne.n	800690a <__sflush_r+0x36>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d0c5      	beq.n	800690a <__sflush_r+0x36>
 800697e:	2b1d      	cmp	r3, #29
 8006980:	d001      	beq.n	8006986 <__sflush_r+0xb2>
 8006982:	2b16      	cmp	r3, #22
 8006984:	d101      	bne.n	800698a <__sflush_r+0xb6>
 8006986:	602f      	str	r7, [r5, #0]
 8006988:	e7b1      	b.n	80068ee <__sflush_r+0x1a>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	e7ad      	b.n	80068f0 <__sflush_r+0x1c>
 8006994:	690f      	ldr	r7, [r1, #16]
 8006996:	2f00      	cmp	r7, #0
 8006998:	d0a9      	beq.n	80068ee <__sflush_r+0x1a>
 800699a:	0793      	lsls	r3, r2, #30
 800699c:	680e      	ldr	r6, [r1, #0]
 800699e:	bf08      	it	eq
 80069a0:	694b      	ldreq	r3, [r1, #20]
 80069a2:	600f      	str	r7, [r1, #0]
 80069a4:	bf18      	it	ne
 80069a6:	2300      	movne	r3, #0
 80069a8:	eba6 0807 	sub.w	r8, r6, r7
 80069ac:	608b      	str	r3, [r1, #8]
 80069ae:	f1b8 0f00 	cmp.w	r8, #0
 80069b2:	dd9c      	ble.n	80068ee <__sflush_r+0x1a>
 80069b4:	6a21      	ldr	r1, [r4, #32]
 80069b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069b8:	4643      	mov	r3, r8
 80069ba:	463a      	mov	r2, r7
 80069bc:	4628      	mov	r0, r5
 80069be:	47b0      	blx	r6
 80069c0:	2800      	cmp	r0, #0
 80069c2:	dc06      	bgt.n	80069d2 <__sflush_r+0xfe>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e78e      	b.n	80068f0 <__sflush_r+0x1c>
 80069d2:	4407      	add	r7, r0
 80069d4:	eba8 0800 	sub.w	r8, r8, r0
 80069d8:	e7e9      	b.n	80069ae <__sflush_r+0xda>
 80069da:	bf00      	nop
 80069dc:	dfbffffe 	.word	0xdfbffffe

080069e0 <_fflush_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	4605      	mov	r5, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	b913      	cbnz	r3, 80069f0 <_fflush_r+0x10>
 80069ea:	2500      	movs	r5, #0
 80069ec:	4628      	mov	r0, r5
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	b118      	cbz	r0, 80069fa <_fflush_r+0x1a>
 80069f2:	6a03      	ldr	r3, [r0, #32]
 80069f4:	b90b      	cbnz	r3, 80069fa <_fflush_r+0x1a>
 80069f6:	f7ff fa6f 	bl	8005ed8 <__sinit>
 80069fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f3      	beq.n	80069ea <_fflush_r+0xa>
 8006a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a04:	07d0      	lsls	r0, r2, #31
 8006a06:	d404      	bmi.n	8006a12 <_fflush_r+0x32>
 8006a08:	0599      	lsls	r1, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_fflush_r+0x32>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0e:	f7ff fb7e 	bl	800610e <__retarget_lock_acquire_recursive>
 8006a12:	4628      	mov	r0, r5
 8006a14:	4621      	mov	r1, r4
 8006a16:	f7ff ff5d 	bl	80068d4 <__sflush_r>
 8006a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a1c:	07da      	lsls	r2, r3, #31
 8006a1e:	4605      	mov	r5, r0
 8006a20:	d4e4      	bmi.n	80069ec <_fflush_r+0xc>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	059b      	lsls	r3, r3, #22
 8006a26:	d4e1      	bmi.n	80069ec <_fflush_r+0xc>
 8006a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2a:	f7ff fb71 	bl	8006110 <__retarget_lock_release_recursive>
 8006a2e:	e7dd      	b.n	80069ec <_fflush_r+0xc>

08006a30 <_putc_r>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	460d      	mov	r5, r1
 8006a34:	4614      	mov	r4, r2
 8006a36:	4606      	mov	r6, r0
 8006a38:	b118      	cbz	r0, 8006a42 <_putc_r+0x12>
 8006a3a:	6a03      	ldr	r3, [r0, #32]
 8006a3c:	b90b      	cbnz	r3, 8006a42 <_putc_r+0x12>
 8006a3e:	f7ff fa4b 	bl	8005ed8 <__sinit>
 8006a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a44:	07d8      	lsls	r0, r3, #31
 8006a46:	d405      	bmi.n	8006a54 <_putc_r+0x24>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	0599      	lsls	r1, r3, #22
 8006a4c:	d402      	bmi.n	8006a54 <_putc_r+0x24>
 8006a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a50:	f7ff fb5d 	bl	800610e <__retarget_lock_acquire_recursive>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	60a3      	str	r3, [r4, #8]
 8006a5c:	da05      	bge.n	8006a6a <_putc_r+0x3a>
 8006a5e:	69a2      	ldr	r2, [r4, #24]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	db12      	blt.n	8006a8a <_putc_r+0x5a>
 8006a64:	b2eb      	uxtb	r3, r5
 8006a66:	2b0a      	cmp	r3, #10
 8006a68:	d00f      	beq.n	8006a8a <_putc_r+0x5a>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	6022      	str	r2, [r4, #0]
 8006a70:	701d      	strb	r5, [r3, #0]
 8006a72:	b2ed      	uxtb	r5, r5
 8006a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a76:	07da      	lsls	r2, r3, #31
 8006a78:	d405      	bmi.n	8006a86 <_putc_r+0x56>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	d402      	bmi.n	8006a86 <_putc_r+0x56>
 8006a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a82:	f7ff fb45 	bl	8006110 <__retarget_lock_release_recursive>
 8006a86:	4628      	mov	r0, r5
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f000 f802 	bl	8006a98 <__swbuf_r>
 8006a94:	4605      	mov	r5, r0
 8006a96:	e7ed      	b.n	8006a74 <_putc_r+0x44>

08006a98 <__swbuf_r>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	460e      	mov	r6, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	b118      	cbz	r0, 8006aaa <__swbuf_r+0x12>
 8006aa2:	6a03      	ldr	r3, [r0, #32]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <__swbuf_r+0x12>
 8006aa6:	f7ff fa17 	bl	8005ed8 <__sinit>
 8006aaa:	69a3      	ldr	r3, [r4, #24]
 8006aac:	60a3      	str	r3, [r4, #8]
 8006aae:	89a3      	ldrh	r3, [r4, #12]
 8006ab0:	071a      	lsls	r2, r3, #28
 8006ab2:	d525      	bpl.n	8006b00 <__swbuf_r+0x68>
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	b31b      	cbz	r3, 8006b00 <__swbuf_r+0x68>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	6922      	ldr	r2, [r4, #16]
 8006abc:	1a98      	subs	r0, r3, r2
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	b2f6      	uxtb	r6, r6
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	4637      	mov	r7, r6
 8006ac6:	dc04      	bgt.n	8006ad2 <__swbuf_r+0x3a>
 8006ac8:	4621      	mov	r1, r4
 8006aca:	4628      	mov	r0, r5
 8006acc:	f7ff ff88 	bl	80069e0 <_fflush_r>
 8006ad0:	b9e0      	cbnz	r0, 8006b0c <__swbuf_r+0x74>
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	6022      	str	r2, [r4, #0]
 8006ade:	701e      	strb	r6, [r3, #0]
 8006ae0:	6962      	ldr	r2, [r4, #20]
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d004      	beq.n	8006af2 <__swbuf_r+0x5a>
 8006ae8:	89a3      	ldrh	r3, [r4, #12]
 8006aea:	07db      	lsls	r3, r3, #31
 8006aec:	d506      	bpl.n	8006afc <__swbuf_r+0x64>
 8006aee:	2e0a      	cmp	r6, #10
 8006af0:	d104      	bne.n	8006afc <__swbuf_r+0x64>
 8006af2:	4621      	mov	r1, r4
 8006af4:	4628      	mov	r0, r5
 8006af6:	f7ff ff73 	bl	80069e0 <_fflush_r>
 8006afa:	b938      	cbnz	r0, 8006b0c <__swbuf_r+0x74>
 8006afc:	4638      	mov	r0, r7
 8006afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b00:	4621      	mov	r1, r4
 8006b02:	4628      	mov	r0, r5
 8006b04:	f000 f806 	bl	8006b14 <__swsetup_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d0d5      	beq.n	8006ab8 <__swbuf_r+0x20>
 8006b0c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b10:	e7f4      	b.n	8006afc <__swbuf_r+0x64>
	...

08006b14 <__swsetup_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4b2a      	ldr	r3, [pc, #168]	; (8006bc0 <__swsetup_r+0xac>)
 8006b18:	4605      	mov	r5, r0
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	b118      	cbz	r0, 8006b28 <__swsetup_r+0x14>
 8006b20:	6a03      	ldr	r3, [r0, #32]
 8006b22:	b90b      	cbnz	r3, 8006b28 <__swsetup_r+0x14>
 8006b24:	f7ff f9d8 	bl	8005ed8 <__sinit>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b2e:	0718      	lsls	r0, r3, #28
 8006b30:	d422      	bmi.n	8006b78 <__swsetup_r+0x64>
 8006b32:	06d9      	lsls	r1, r3, #27
 8006b34:	d407      	bmi.n	8006b46 <__swsetup_r+0x32>
 8006b36:	2309      	movs	r3, #9
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	f04f 30ff 	mov.w	r0, #4294967295
 8006b44:	e034      	b.n	8006bb0 <__swsetup_r+0x9c>
 8006b46:	0758      	lsls	r0, r3, #29
 8006b48:	d512      	bpl.n	8006b70 <__swsetup_r+0x5c>
 8006b4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b4c:	b141      	cbz	r1, 8006b60 <__swsetup_r+0x4c>
 8006b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b52:	4299      	cmp	r1, r3
 8006b54:	d002      	beq.n	8006b5c <__swsetup_r+0x48>
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7ff fadc 	bl	8006114 <_free_r>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6363      	str	r3, [r4, #52]	; 0x34
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6063      	str	r3, [r4, #4]
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0308 	orr.w	r3, r3, #8
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	6923      	ldr	r3, [r4, #16]
 8006b7a:	b94b      	cbnz	r3, 8006b90 <__swsetup_r+0x7c>
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b86:	d003      	beq.n	8006b90 <__swsetup_r+0x7c>
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	f000 f8a7 	bl	8006cde <__smakebuf_r>
 8006b90:	89a0      	ldrh	r0, [r4, #12]
 8006b92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b96:	f010 0301 	ands.w	r3, r0, #1
 8006b9a:	d00a      	beq.n	8006bb2 <__swsetup_r+0x9e>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	6963      	ldr	r3, [r4, #20]
 8006ba2:	425b      	negs	r3, r3
 8006ba4:	61a3      	str	r3, [r4, #24]
 8006ba6:	6923      	ldr	r3, [r4, #16]
 8006ba8:	b943      	cbnz	r3, 8006bbc <__swsetup_r+0xa8>
 8006baa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006bae:	d1c4      	bne.n	8006b3a <__swsetup_r+0x26>
 8006bb0:	bd38      	pop	{r3, r4, r5, pc}
 8006bb2:	0781      	lsls	r1, r0, #30
 8006bb4:	bf58      	it	pl
 8006bb6:	6963      	ldrpl	r3, [r4, #20]
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	e7f4      	b.n	8006ba6 <__swsetup_r+0x92>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e7f7      	b.n	8006bb0 <__swsetup_r+0x9c>
 8006bc0:	24000068 	.word	0x24000068

08006bc4 <memmove>:
 8006bc4:	4288      	cmp	r0, r1
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	eb01 0402 	add.w	r4, r1, r2
 8006bcc:	d902      	bls.n	8006bd4 <memmove+0x10>
 8006bce:	4284      	cmp	r4, r0
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	d807      	bhi.n	8006be4 <memmove+0x20>
 8006bd4:	1e43      	subs	r3, r0, #1
 8006bd6:	42a1      	cmp	r1, r4
 8006bd8:	d008      	beq.n	8006bec <memmove+0x28>
 8006bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006be2:	e7f8      	b.n	8006bd6 <memmove+0x12>
 8006be4:	4402      	add	r2, r0
 8006be6:	4601      	mov	r1, r0
 8006be8:	428a      	cmp	r2, r1
 8006bea:	d100      	bne.n	8006bee <memmove+0x2a>
 8006bec:	bd10      	pop	{r4, pc}
 8006bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bf6:	e7f7      	b.n	8006be8 <memmove+0x24>

08006bf8 <_sbrk_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d06      	ldr	r5, [pc, #24]	; (8006c14 <_sbrk_r+0x1c>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f7fe fff4 	bl	8005bf0 <_sbrk>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_sbrk_r+0x1a>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_sbrk_r+0x1a>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	240002b4 	.word	0x240002b4

08006c18 <memcpy>:
 8006c18:	440a      	add	r2, r1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xc>
 8006c22:	4770      	bx	lr
 8006c24:	b510      	push	{r4, lr}
 8006c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2e:	4291      	cmp	r1, r2
 8006c30:	d1f9      	bne.n	8006c26 <memcpy+0xe>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <_realloc_r>:
 8006c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c38:	4680      	mov	r8, r0
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	b921      	cbnz	r1, 8006c4a <_realloc_r+0x16>
 8006c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	4611      	mov	r1, r2
 8006c46:	f7ff bad1 	b.w	80061ec <_malloc_r>
 8006c4a:	b92a      	cbnz	r2, 8006c58 <_realloc_r+0x24>
 8006c4c:	f7ff fa62 	bl	8006114 <_free_r>
 8006c50:	4625      	mov	r5, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	f000 f8a0 	bl	8006d9c <_malloc_usable_size_r>
 8006c5c:	4284      	cmp	r4, r0
 8006c5e:	4607      	mov	r7, r0
 8006c60:	d802      	bhi.n	8006c68 <_realloc_r+0x34>
 8006c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c66:	d812      	bhi.n	8006c8e <_realloc_r+0x5a>
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7ff fabe 	bl	80061ec <_malloc_r>
 8006c70:	4605      	mov	r5, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d0ed      	beq.n	8006c52 <_realloc_r+0x1e>
 8006c76:	42bc      	cmp	r4, r7
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	bf28      	it	cs
 8006c7e:	463a      	movcs	r2, r7
 8006c80:	f7ff ffca 	bl	8006c18 <memcpy>
 8006c84:	4631      	mov	r1, r6
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fa44 	bl	8006114 <_free_r>
 8006c8c:	e7e1      	b.n	8006c52 <_realloc_r+0x1e>
 8006c8e:	4635      	mov	r5, r6
 8006c90:	e7df      	b.n	8006c52 <_realloc_r+0x1e>

08006c92 <__swhatbuf_r>:
 8006c92:	b570      	push	{r4, r5, r6, lr}
 8006c94:	460c      	mov	r4, r1
 8006c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	b096      	sub	sp, #88	; 0x58
 8006c9e:	4615      	mov	r5, r2
 8006ca0:	461e      	mov	r6, r3
 8006ca2:	da0d      	bge.n	8006cc0 <__swhatbuf_r+0x2e>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006caa:	f04f 0100 	mov.w	r1, #0
 8006cae:	bf0c      	ite	eq
 8006cb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006cb4:	2340      	movne	r3, #64	; 0x40
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	6031      	str	r1, [r6, #0]
 8006cba:	602b      	str	r3, [r5, #0]
 8006cbc:	b016      	add	sp, #88	; 0x58
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	466a      	mov	r2, sp
 8006cc2:	f000 f849 	bl	8006d58 <_fstat_r>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	dbec      	blt.n	8006ca4 <__swhatbuf_r+0x12>
 8006cca:	9901      	ldr	r1, [sp, #4]
 8006ccc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006cd0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006cd4:	4259      	negs	r1, r3
 8006cd6:	4159      	adcs	r1, r3
 8006cd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cdc:	e7eb      	b.n	8006cb6 <__swhatbuf_r+0x24>

08006cde <__smakebuf_r>:
 8006cde:	898b      	ldrh	r3, [r1, #12]
 8006ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ce2:	079d      	lsls	r5, r3, #30
 8006ce4:	4606      	mov	r6, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	d507      	bpl.n	8006cfa <__smakebuf_r+0x1c>
 8006cea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	6123      	str	r3, [r4, #16]
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	6163      	str	r3, [r4, #20]
 8006cf6:	b002      	add	sp, #8
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
 8006cfa:	ab01      	add	r3, sp, #4
 8006cfc:	466a      	mov	r2, sp
 8006cfe:	f7ff ffc8 	bl	8006c92 <__swhatbuf_r>
 8006d02:	9900      	ldr	r1, [sp, #0]
 8006d04:	4605      	mov	r5, r0
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff fa70 	bl	80061ec <_malloc_r>
 8006d0c:	b948      	cbnz	r0, 8006d22 <__smakebuf_r+0x44>
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	059a      	lsls	r2, r3, #22
 8006d14:	d4ef      	bmi.n	8006cf6 <__smakebuf_r+0x18>
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	f043 0302 	orr.w	r3, r3, #2
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	e7e3      	b.n	8006cea <__smakebuf_r+0xc>
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	6020      	str	r0, [r4, #0]
 8006d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	6163      	str	r3, [r4, #20]
 8006d30:	9b01      	ldr	r3, [sp, #4]
 8006d32:	6120      	str	r0, [r4, #16]
 8006d34:	b15b      	cbz	r3, 8006d4e <__smakebuf_r+0x70>
 8006d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f000 f81e 	bl	8006d7c <_isatty_r>
 8006d40:	b128      	cbz	r0, 8006d4e <__smakebuf_r+0x70>
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	f023 0303 	bic.w	r3, r3, #3
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	431d      	orrs	r5, r3
 8006d52:	81a5      	strh	r5, [r4, #12]
 8006d54:	e7cf      	b.n	8006cf6 <__smakebuf_r+0x18>
	...

08006d58 <_fstat_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	; (8006d78 <_fstat_r+0x20>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	602b      	str	r3, [r5, #0]
 8006d66:	f7fe ff1a 	bl	8005b9e <_fstat>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d102      	bne.n	8006d74 <_fstat_r+0x1c>
 8006d6e:	682b      	ldr	r3, [r5, #0]
 8006d70:	b103      	cbz	r3, 8006d74 <_fstat_r+0x1c>
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	bd38      	pop	{r3, r4, r5, pc}
 8006d76:	bf00      	nop
 8006d78:	240002b4 	.word	0x240002b4

08006d7c <_isatty_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	; (8006d98 <_isatty_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fe ff19 	bl	8005bbe <_isatty>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_isatty_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_isatty_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	240002b4 	.word	0x240002b4

08006d9c <_malloc_usable_size_r>:
 8006d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da0:	1f18      	subs	r0, r3, #4
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	bfbc      	itt	lt
 8006da6:	580b      	ldrlt	r3, [r1, r0]
 8006da8:	18c0      	addlt	r0, r0, r3
 8006daa:	4770      	bx	lr

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
